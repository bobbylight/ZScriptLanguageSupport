/* The following code was generated by JFlex 1.4.1 on 1/30/16 11:16 AM */

/*
 * 07/29/2012
 *
 * This library is distributed under a modified BSD license.  See the included
 * ZScriptLanguageSupport.License.txt file for details.
 */
package org.fife.rsta.zscript;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * A parser for the ZScript.
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated <code>ZScriptTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 1.0
 *
 */

public class ZScriptTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** lexical states */
  public static final int EOL_COMMENT = 1;
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\31\1\24\1\0\1\31\1\37\22\0\1\31\1\17\1\25"+
    "\1\40\1\41\1\45\1\126\1\14\1\12\1\12\1\45\1\7\1\44"+
    "\1\20\1\34\1\13\1\30\1\120\1\22\1\111\1\121\3\5\2\3"+
    "\1\55\1\43\1\15\1\11\1\16\1\10\1\40\1\105\1\4\1\60"+
    "\1\65\1\6\1\35\1\57\1\101\1\67\1\122\1\102\1\33\1\76"+
    "\1\103\1\114\1\100\1\110\1\112\1\64\1\73\1\32\1\104\1\106"+
    "\1\23\1\115\1\116\1\42\1\21\1\42\1\125\1\2\1\0\1\27"+
    "\1\63\1\77\1\72\1\54\1\36\1\66\1\46\1\52\1\1\1\113"+
    "\1\53\1\62\1\70\1\61\1\50\1\117\1\71\1\51\1\47\1\75"+
    "\1\26\1\56\1\107\1\74\1\123\1\124\1\127\1\124\1\44\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\3\4\1\5\1\4\1\6"+
    "\3\4\1\2\1\7\1\2\1\3\1\10\1\2\1\4"+
    "\2\2\1\1\30\2\2\4\1\11\1\12\3\11\2\13"+
    "\2\3\1\14\1\15\2\16\1\17\1\6\2\7\1\20"+
    "\1\2\1\13\2\2\1\21\10\2\1\22\34\2\4\0"+
    "\1\3\1\0\1\3\1\13\1\14\1\6\1\23\1\6"+
    "\3\16\1\6\2\7\1\24\1\2\1\25\4\2\1\26"+
    "\33\2\4\0\1\14\1\0\1\6\1\7\2\25\1\22"+
    "\2\2\1\27\1\2\1\26\2\2\1\22\17\2\2\0"+
    "\1\30\1\25\1\0\4\2\1\0\6\2\1\21\4\2"+
    "\3\0\2\2\1\31\1\2\1\0\3\2\1\22\5\2"+
    "\1\0\1\32\14\0\2\2\11\0\3\2\1\0\2\2"+
    "\22\0\1\2\17\0\2\2\1\0\1\2\44\0\1\2"+
    "\5\0\1\33\11\0\1\2\6\0\1\32\14\0\1\34"+
    "\16\0\1\35\3\0\1\2\47\0\1\35\20\0\1\33"+
    "\22\0\1\36\12\0\1\32\3\0\2\32\53\0\1\36"+
    "\115\0\1\37\101\0\1\37\64\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[728];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\130\0\260\0\u0108\0\u0160\0\u01b8\0\u0210\0\u0268"+
    "\0\u0210\0\u02c0\0\u0318\0\u0370\0\u03c8\0\u0420\0\260\0\u0478"+
    "\0\u04d0\0\u0528\0\u0580\0\u05d8\0\u0630\0\u0688\0\u06e0\0\u0210"+
    "\0\u0210\0\u0738\0\u0790\0\u07e8\0\u0840\0\u0898\0\u08f0\0\u0948"+
    "\0\u09a0\0\u09f8\0\u0a50\0\u0aa8\0\u0b00\0\u0b58\0\u0bb0\0\u0c08"+
    "\0\u0c60\0\u0cb8\0\u0d10\0\u0d68\0\u0dc0\0\u0e18\0\u0e70\0\u0ec8"+
    "\0\u0f20\0\u0f78\0\u0fd0\0\u0210\0\u1028\0\u1080\0\u10d8\0\u1130"+
    "\0\u1188\0\u11e0\0\u1238\0\u1290\0\u0210\0\u12e8\0\u1340\0\u0210"+
    "\0\u1398\0\u13f0\0\u1448\0\u0210\0\u14a0\0\u14f8\0\u1550\0\u15a8"+
    "\0\u0108\0\u1600\0\u1658\0\u16b0\0\u1708\0\u1760\0\u17b8\0\u1810"+
    "\0\u1868\0\u0108\0\u18c0\0\u1918\0\u1970\0\u19c8\0\u1a20\0\u1a78"+
    "\0\u1ad0\0\u1b28\0\u1b80\0\u1bd8\0\u1c30\0\u1c88\0\u1ce0\0\u1d38"+
    "\0\u1d90\0\u1de8\0\u1e40\0\u1e98\0\u1ef0\0\u1f48\0\u1fa0\0\u1ff8"+
    "\0\u2050\0\u20a8\0\u2100\0\u2158\0\u21b0\0\u2208\0\u2260\0\u22b8"+
    "\0\u2310\0\u2368\0\u23c0\0\u2418\0\u1130\0\u2470\0\u1130\0\u24c8"+
    "\0\u0210\0\u2520\0\u2578\0\u25d0\0\u2628\0\u2680\0\u26d8\0\u2730"+
    "\0\u0210\0\u2788\0\u27e0\0\u2838\0\u2890\0\u28e8\0\u2940\0\u0108"+
    "\0\u2998\0\u29f0\0\u2a48\0\u2aa0\0\u2af8\0\u2b50\0\u2ba8\0\u2c00"+
    "\0\u2c58\0\u2cb0\0\u2d08\0\u2d60\0\u2db8\0\u2e10\0\u2e68\0\u2ec0"+
    "\0\u2f18\0\u2f70\0\u2fc8\0\u3020\0\u3078\0\u30d0\0\u3128\0\u3180"+
    "\0\u31d8\0\u3230\0\u3288\0\u32e0\0\u3338\0\u3390\0\u33e8\0\u3440"+
    "\0\u3498\0\u34f0\0\u3548\0\u35a0\0\u35f8\0\u3650\0\u36a8\0\u3700"+
    "\0\u0108\0\u3758\0\u37b0\0\u3808\0\u3860\0\u38b8\0\u3910\0\u3968"+
    "\0\u39c0\0\u3a18\0\u3a70\0\u3ac8\0\u3b20\0\u3b78\0\u3bd0\0\u3c28"+
    "\0\u3c80\0\u3cd8\0\u3d30\0\u3d88\0\u3de0\0\u3e38\0\u3e90\0\u3ee8"+
    "\0\u1130\0\u3f40\0\u3f98\0\u3ff0\0\u4048\0\u40a0\0\u40f8\0\u4150"+
    "\0\u41a8\0\u4200\0\u4258\0\u42b0\0\u4308\0\u4360\0\u43b8\0\u4410"+
    "\0\u4468\0\u44c0\0\u4518\0\u3ee8\0\u4570\0\u45c8\0\u4620\0\u0108"+
    "\0\u4678\0\u46d0\0\u4728\0\u4780\0\u47d8\0\u4830\0\u4888\0\u48e0"+
    "\0\u4938\0\u4990\0\u49e8\0\u4a40\0\u0210\0\u4a98\0\u4af0\0\u4b48"+
    "\0\u4ba0\0\u4bf8\0\u4c50\0\u4ca8\0\u4d00\0\u4d58\0\u4db0\0\u4e08"+
    "\0\u4e60\0\u4eb8\0\u4f10\0\u4f68\0\u4fc0\0\u5018\0\u5070\0\u50c8"+
    "\0\u5120\0\u5178\0\u51d0\0\u5228\0\u5280\0\u52d8\0\u5330\0\u5388"+
    "\0\u53e0\0\u5438\0\u5490\0\u54e8\0\u5540\0\u5598\0\u55f0\0\u5648"+
    "\0\u56a0\0\u56f8\0\u5750\0\u57a8\0\u5800\0\u5858\0\u58b0\0\u5908"+
    "\0\u5960\0\u59b8\0\u5a10\0\u5a68\0\u5ac0\0\u5b18\0\u5b70\0\u5bc8"+
    "\0\u5c20\0\u5c78\0\u5cd0\0\u5d28\0\u5d80\0\u5dd8\0\u5e30\0\u5e88"+
    "\0\u5ee0\0\u5f38\0\u5f90\0\u5fe8\0\u6040\0\u6098\0\u60f0\0\u6148"+
    "\0\u61a0\0\u61f8\0\u6250\0\u62a8\0\u6300\0\u6358\0\u63b0\0\u6408"+
    "\0\u6460\0\u64b8\0\u6510\0\u6568\0\u65c0\0\u6618\0\u6670\0\u66c8"+
    "\0\u6720\0\u6778\0\u67d0\0\u6828\0\u6880\0\u68d8\0\u6930\0\u6988"+
    "\0\u69e0\0\u6a38\0\u6a90\0\u6ae8\0\u6b40\0\u6b98\0\u6bf0\0\u6c48"+
    "\0\u6ca0\0\u6cf8\0\u6d50\0\u6da8\0\u6e00\0\u6e58\0\u6eb0\0\u6f08"+
    "\0\u6f60\0\u6fb8\0\u7010\0\u7068\0\u70c0\0\u7118\0\u7170\0\u71c8"+
    "\0\u7220\0\u7278\0\u72d0\0\u7328\0\u7380\0\u73d8\0\u7430\0\u7488"+
    "\0\u74e0\0\u7538\0\u7590\0\u75e8\0\u7640\0\u7698\0\u76f0\0\u7748"+
    "\0\u77a0\0\u77f8\0\u7850\0\u78a8\0\u7900\0\u7958\0\u79b0\0\u7a08"+
    "\0\u0210\0\u7a60\0\u7ab8\0\u7b10\0\u7b68\0\u7bc0\0\u7c18\0\u7c70"+
    "\0\u7cc8\0\u7d20\0\u7d78\0\u7dd0\0\u7e28\0\u7e80\0\u7ed8\0\u7f30"+
    "\0\u7f88\0\u7fe0\0\u8038\0\u8090\0\u80e8\0\u8140\0\u8198\0\u81f0"+
    "\0\u8248\0\u82a0\0\u82f8\0\u8350\0\u83a8\0\u8400\0\u8458\0\u84b0"+
    "\0\u8508\0\u8560\0\u85b8\0\u8610\0\u8668\0\u86c0\0\u8718\0\u8770"+
    "\0\u87c8\0\u8820\0\u8878\0\u88d0\0\u8928\0\u8980\0\u89d8\0\u8a30"+
    "\0\u75e8\0\u8a88\0\u8ae0\0\u8b38\0\u8b90\0\u8be8\0\u8c40\0\u8c98"+
    "\0\u8cf0\0\u8d48\0\u8da0\0\u0210\0\u8df8\0\u8e50\0\u8ea8\0\u8f00"+
    "\0\u8f58\0\u8fb0\0\u9008\0\u9060\0\u90b8\0\u9110\0\u9168\0\u91c0"+
    "\0\u9218\0\u9270\0\u92c8\0\u9320\0\u0210\0\u9378\0\u93d0\0\u9428"+
    "\0\u9480\0\u94d8\0\u9530\0\u9588\0\u95e0\0\u9638\0\u9690\0\u96e8"+
    "\0\u9740\0\u9798\0\u97f0\0\u9848\0\u98a0\0\u98f8\0\u9950\0\u0210"+
    "\0\u99a8\0\u9a00\0\u9a58\0\u9ab0\0\u9b08\0\u9b60\0\u9bb8\0\u9c10"+
    "\0\u9c68\0\u9cc0\0\u9d18\0\u9d70\0\u9dc8\0\u9e20\0\u9e78\0\u8c40"+
    "\0\u9ed0\0\u9f28\0\u9f80\0\u9fd8\0\ua030\0\ua088\0\ua0e0\0\ua138"+
    "\0\ua190\0\ua1e8\0\ua240\0\ua298\0\ua2f0\0\ua348\0\ua3a0\0\ua3f8"+
    "\0\ua450\0\ua4a8\0\ua500\0\ua558\0\ua5b0\0\ua608\0\ua660\0\ua6b8"+
    "\0\ua710\0\ua768\0\ua7c0\0\ua818\0\ua870\0\ua8c8\0\ua920\0\ua978"+
    "\0\ua9d0\0\uaa28\0\uaa80\0\uaad8\0\uab30\0\uab88\0\uabe0\0\uac38"+
    "\0\uac90\0\uace8\0\uad40\0\uad98\0\uadf0\0\uae48\0\uaea0\0\uaef8"+
    "\0\uaf50\0\uafa8\0\ub000\0\ub058\0\ub0b0\0\ub108\0\ub160\0\ub1b8"+
    "\0\ub210\0\ub268\0\ub2c0\0\ub318\0\ub370\0\ub3c8\0\ub420\0\ub478"+
    "\0\ub4d0\0\ub528\0\ub580\0\ub5d8\0\ub630\0\ub688\0\ub6e0\0\ub738"+
    "\0\ub790\0\ub7e8\0\ub840\0\ub898\0\ub8f0\0\ub948\0\ub9a0\0\ub9f8"+
    "\0\uba50\0\ubaa8\0\ubb00\0\ubb58\0\ubbb0\0\ubc08\0\ubc60\0\ubcb8"+
    "\0\ubd10\0\ubd68\0\ubdc0\0\ube18\0\ube70\0\ubec8\0\ubf20\0\ubf78"+
    "\0\ubfd0\0\uc028\0\uc080\0\uc0d8\0\uc130\0\uc188\0\uc1e0\0\uc238"+
    "\0\uc290\0\uc2e8\0\uc340\0\uc398\0\uc3f0\0\uc448\0\uc4a0\0\uc4f8"+
    "\0\uc550\0\uc5a8\0\uc600\0\uc658\0\uc6b0\0\uc708\0\uc760\0\uc7b8"+
    "\0\uc810\0\u0210\0\uc868\0\uc8c0\0\uc918\0\uc970\0\uc9c8\0\uca20"+
    "\0\uca78\0\ucad0\0\ucb28\0\ucb80\0\ucbd8\0\ucc30\0\ucc88\0\ucce0"+
    "\0\ucd38\0\ucd90\0\ucde8\0\uce40\0\uce98\0\ucef0\0\ucf48\0\ucfa0"+
    "\0\ucff8\0\ud050\0\ud0a8\0\ud100\0\ud158\0\ud1b0\0\ud208\0\ud260"+
    "\0\ud2b8\0\ud310\0\ud368\0\ud3c0\0\ud418\0\ud470\0\ud4c8\0\ud520"+
    "\0\ud578\0\ud5d0\0\ud628\0\ud680\0\ud6d8\0\ud730\0\ud788\0\ud7e0"+
    "\0\ud838\0\ud890\0\ud8e8\0\ud940\0\ud998\0\ud9f0\0\uda48\0\udaa0"+
    "\0\udaf8\0\udb50\0\udba8\0\u9d18\0\udc00\0\udc58\0\udcb0\0\udd08"+
    "\0\udd60\0\uddb8\0\ude10\0\ude68\0\udec0\0\udf18\0\udf70\0\udfc8"+
    "\0\ue020\0\ue078\0\ue0d0\0\ue128\0\ue180\0\ue1d8\0\ue230\0\ue288"+
    "\0\ue2e0\0\ue338\0\ue390\0\ue3e8\0\ue440\0\ue498\0\ue4f0\0\ue548"+
    "\0\ue5a0\0\ue5f8\0\ue650\0\ue6a8\0\ue700\0\ue758\0\ue7b0\0\ue808"+
    "\0\ue860\0\ue8b8\0\ue910\0\ue968\0\ue9c0\0\uea18\0\uea70\0\ueac8"+
    "\0\ueb20\0\ueb78\0\uebd0\0\uec28\0\uec80\0\uecd8\0\ued30\0\ued88"+
    "\0\uede0\0\uee38\0\uee90\0\ueee8\0\uef40\0\uef98\0\ueff0\0\uf048";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[728];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\4\1\5\1\4\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\7\1\16"+
    "\1\17\1\5\1\4\1\0\1\20\1\21\1\4\1\22"+
    "\1\23\1\4\1\24\1\25\1\26\1\27\1\30\2\3"+
    "\1\11\1\31\1\7\1\10\1\4\1\32\1\4\1\33"+
    "\1\34\1\35\1\36\1\7\1\37\1\40\1\41\2\4"+
    "\1\42\1\43\1\4\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\2\4\1\52\1\53\1\54\4\4\1\55\1\56"+
    "\1\4\1\57\1\5\1\60\5\4\2\5\2\4\1\11"+
    "\1\7\1\61\1\62\24\63\1\64\11\63\1\65\7\63"+
    "\1\66\7\63\1\67\51\63\7\3\12\0\3\3\2\0"+
    "\3\3\1\0\2\3\1\0\2\3\1\0\2\3\4\0"+
    "\7\3\1\0\46\3\4\0\1\3\6\4\12\0\1\3"+
    "\2\4\2\0\3\4\1\0\2\4\1\0\2\4\1\0"+
    "\1\3\1\4\4\0\7\4\1\0\46\4\4\0\3\70"+
    "\1\5\1\70\1\5\1\71\12\0\1\70\1\5\1\70"+
    "\2\0\2\70\1\5\1\0\1\72\1\73\1\74\2\70"+
    "\1\0\2\70\4\0\5\70\1\73\1\71\1\0\17\70"+
    "\1\72\13\70\1\5\6\70\2\5\2\70\13\0\1\7"+
    "\1\0\1\7\257\0\1\7\127\0\1\7\1\0\1\75"+
    "\114\0\10\76\1\77\3\76\1\100\4\76\1\101\2\76"+
    "\1\0\103\76\15\0\1\10\130\0\1\10\122\0\1\7"+
    "\4\0\1\7\1\0\1\7\107\0\21\20\1\102\2\20"+
    "\1\103\1\104\102\20\1\3\6\4\12\0\1\3\2\4"+
    "\2\0\3\4\1\0\2\4\1\0\2\4\1\0\1\3"+
    "\1\4\4\0\7\4\1\0\3\4\1\105\42\4\4\0"+
    "\3\70\1\5\1\70\1\5\1\71\12\0\1\70\1\5"+
    "\1\106\2\0\2\70\1\5\1\0\1\72\1\73\1\74"+
    "\2\70\1\0\2\70\4\0\5\70\1\73\1\71\1\0"+
    "\17\70\1\72\11\70\1\106\1\70\1\5\6\70\2\5"+
    "\2\70\35\0\1\23\76\0\1\3\6\4\12\0\1\3"+
    "\2\4\2\0\3\4\1\0\2\4\1\0\2\4\1\0"+
    "\1\3\1\4\4\0\4\4\1\107\2\4\1\0\3\4"+
    "\1\110\6\4\1\111\33\4\7\0\1\74\1\0\1\74"+
    "\14\0\1\74\5\0\1\74\60\0\1\74\6\0\2\74"+
    "\6\0\1\3\6\4\12\0\1\3\2\4\2\0\1\4"+
    "\1\112\1\4\1\0\2\4\1\0\2\4\1\0\1\3"+
    "\1\4\4\0\7\4\1\0\46\4\4\0\1\3\6\4"+
    "\12\0\1\3\2\4\2\0\1\4\1\113\1\4\1\0"+
    "\2\4\1\0\1\4\1\114\1\0\1\3\1\4\4\0"+
    "\5\4\1\115\1\4\1\0\3\4\1\116\42\4\4\0"+
    "\1\3\6\4\12\0\1\3\2\4\2\0\3\4\1\0"+
    "\2\4\1\0\2\4\1\0\1\3\1\4\4\0\1\117"+
    "\6\4\1\0\13\4\1\120\32\4\4\0\1\3\6\4"+
    "\12\0\1\3\2\4\2\0\3\4\1\0\2\4\1\0"+
    "\2\4\1\0\1\3\1\4\4\0\7\4\1\0\21\4"+
    "\1\121\24\4\4\0\1\3\6\4\12\0\1\3\2\4"+
    "\2\0\3\4\1\0\2\4\1\0\1\4\1\122\1\0"+
    "\1\3\1\4\4\0\1\4\1\123\5\4\1\0\4\4"+
    "\1\124\5\4\1\125\33\4\4\0\1\3\6\4\12\0"+
    "\1\3\2\4\2\0\3\4\1\0\2\4\1\0\2\4"+
    "\1\0\1\3\1\4\4\0\7\4\1\0\1\126\45\4"+
    "\4\0\1\3\6\4\12\0\1\3\2\4\2\0\3\4"+
    "\1\0\2\4\1\0\2\4\1\0\1\3\1\4\4\0"+
    "\5\4\1\127\1\4\1\0\1\126\45\4\4\0\1\3"+
    "\6\4\12\0\1\3\2\4\2\0\3\4\1\0\2\4"+
    "\1\0\2\4\1\0\1\3\1\4\4\0\1\130\6\4"+
    "\1\0\46\4\4\0\1\3\6\4\12\0\1\3\2\4"+
    "\2\0\1\4\1\131\1\4\1\0\2\4\1\0\2\4"+
    "\1\0\1\3\1\4\4\0\7\4\1\0\46\4\4\0"+
    "\1\3\6\4\12\0\1\3\2\4\2\0\3\4\1\0"+
    "\2\4\1\0\2\4\1\0\1\3\1\4\4\0\5\4"+
    "\1\132\1\4\1\0\3\4\1\133\42\4\4\0\1\3"+
    "\6\4\12\0\1\3\2\4\2\0\3\4\1\0\2\4"+
    "\1\0\2\4\1\0\1\3\1\4\4\0\7\4\1\0"+
    "\3\4\1\134\7\4\1\135\32\4\4\0\1\3\6\4"+
    "\12\0\1\3\2\4\2\0\3\4\1\0\2\4\1\0"+
    "\2\4\1\0\1\3\1\4\4\0\4\4\1\136\2\4"+
    "\1\0\1\137\20\4\1\140\17\4\1\141\4\4\4\0"+
    "\1\3\6\4\12\0\1\3\2\4\2\0\3\4\1\0"+
    "\2\4\1\0\2\4\1\0\1\3\1\4\4\0\5\4"+
    "\1\142\1\4\1\0\46\4\4\0\1\3\6\4\12\0"+
    "\1\3\2\4\2\0\3\4\1\0\2\4\1\0\2\4"+
    "\1\0\1\3\1\4\4\0\7\4\1\0\12\4\1\143"+
    "\33\4\4\0\1\3\6\4\12\0\1\3\2\4\2\0"+
    "\3\4\1\0\2\4\1\0\2\4\1\0\1\3\1\4"+
    "\4\0\2\4\1\114\4\4\1\0\46\4\4\0\1\3"+
    "\6\4\12\0\1\3\2\4\2\0\3\4\1\0\2\4"+
    "\1\0\2\4\1\0\1\3\1\4\4\0\6\4\1\144"+
    "\1\0\46\4\4\0\1\3\6\4\12\0\1\3\2\4"+
    "\2\0\3\4\1\0\2\4\1\0\2\4\1\0\1\3"+
    "\1\4\4\0\7\4\1\0\3\4\1\122\42\4\4\0"+
    "\1\3\6\4\12\0\1\3\2\4\2\0\1\4\1\145"+
    "\1\4\1\0\2\4\1\0\2\4\1\0\1\3\1\4"+
    "\4\0\7\4\1\0\13\4\1\146\32\4\4\0\1\3"+
    "\6\4\12\0\1\3\2\4\2\0\1\4\1\147\1\4"+
    "\1\0\2\4\1\0\2\4\1\0\1\3\1\4\4\0"+
    "\4\4\1\145\2\4\1\0\46\4\4\0\1\3\6\4"+
    "\12\0\1\3\2\4\2\0\3\4\1\0\2\4\1\0"+
    "\2\4\1\0\1\3\1\4\4\0\7\4\1\0\3\4"+
    "\1\150\42\4\4\0\1\3\6\4\12\0\1\3\2\4"+
    "\2\0\3\4\1\0\2\4\1\0\2\4\1\0\1\3"+
    "\1\4\4\0\7\4\1\0\3\4\1\151\42\4\4\0"+
    "\1\3\6\4\12\0\1\3\2\4\2\0\3\4\1\0"+
    "\2\4\1\0\2\4\1\0\1\3\1\4\4\0\7\4"+
    "\1\0\5\4\1\152\5\4\1\153\32\4\4\0\1\3"+
    "\6\4\12\0\1\3\2\4\2\0\1\4\1\154\1\4"+
    "\1\0\2\4\1\0\2\4\1\0\1\3\1\4\4\0"+
    "\7\4\1\0\46\4\4\0\1\3\6\4\12\0\1\3"+
    "\2\4\2\0\3\4\1\0\2\4\1\0\2\4\1\0"+
    "\1\3\1\4\4\0\7\4\1\0\17\4\1\155\26\4"+
    "\4\0\1\3\6\4\12\0\1\3\2\4\2\0\1\4"+
    "\1\156\1\4\1\0\2\4\1\0\2\4\1\0\1\3"+
    "\1\4\4\0\7\4\1\0\46\4\132\0\1\7\130\0"+
    "\1\7\24\63\1\0\11\63\1\0\7\63\1\0\7\63"+
    "\1\0\51\63\47\0\1\157\2\0\1\160\124\0\1\161"+
    "\136\0\1\162\51\0\7\70\12\0\3\70\2\0\3\70"+
    "\1\0\2\70\1\0\2\70\1\0\2\70\4\0\7\70"+
    "\1\0\46\70\4\0\3\70\1\163\1\70\1\163\1\70"+
    "\1\164\10\0\1\164\1\70\1\163\1\70\2\0\2\70"+
    "\1\163\1\0\2\70\1\0\2\70\1\0\2\70\4\0"+
    "\7\70\1\0\33\70\1\163\6\70\2\163\2\70\4\0"+
    "\7\70\12\0\3\70\2\0\3\70\1\0\1\70\1\165"+
    "\1\0\2\70\1\0\2\70\4\0\5\70\1\165\1\70"+
    "\1\0\46\70\4\0\7\70\12\0\3\70\2\0\3\70"+
    "\1\0\1\165\1\70\1\0\2\70\1\0\2\70\4\0"+
    "\7\70\1\0\17\70\1\165\26\70\4\0\3\70\1\74"+
    "\1\70\1\74\1\166\12\0\1\70\1\74\1\70\2\0"+
    "\2\70\1\74\1\0\1\70\1\167\1\0\2\167\1\0"+
    "\2\70\4\0\5\70\1\167\1\166\1\0\33\70\1\74"+
    "\6\70\2\74\2\70\4\0\14\170\1\171\7\170\1\0"+
    "\113\170\1\172\3\170\1\171\7\170\1\0\110\170\1\173"+
    "\2\170\1\76\3\170\1\174\4\170\1\76\1\175\1\176"+
    "\1\0\3\76\1\175\5\170\1\76\10\170\1\76\13\170"+
    "\1\76\4\170\2\76\15\170\1\176\1\170\1\175\6\170"+
    "\1\175\1\173\6\170\5\103\1\20\2\103\1\20\3\103"+
    "\1\20\4\103\2\20\1\177\1\0\4\20\5\103\1\20"+
    "\10\103\1\20\13\103\1\20\4\103\2\20\15\103\1\177"+
    "\1\103\1\20\6\103\2\20\27\103\1\200\3\103\1\201"+
    "\102\103\1\3\6\4\12\0\1\3\2\4\2\0\3\4"+
    "\1\0\2\4\1\0\2\4\1\0\1\3\1\4\4\0"+
    "\4\4\1\202\2\4\1\0\46\4\4\0\3\70\4\203"+
    "\12\0\1\70\1\203\1\70\2\0\1\70\2\203\1\0"+
    "\2\70\1\0\2\203\1\0\2\70\4\0\6\70\1\203"+
    "\1\0\2\70\1\203\2\70\1\203\1\70\1\203\4\70"+
    "\1\203\4\70\1\203\5\70\1\203\3\70\1\203\6\70"+
    "\2\203\2\70\4\0\1\3\6\4\12\0\1\3\2\4"+
    "\2\0\3\4\1\0\2\4\1\0\2\4\1\0\1\3"+
    "\1\4\4\0\7\4\1\0\12\4\1\204\33\4\4\0"+
    "\1\3\6\4\12\0\1\3\2\4\2\0\3\4\1\0"+
    "\2\4\1\0\2\4\1\0\1\3\1\4\4\0\7\4"+
    "\1\0\10\4\1\205\35\4\4\0\1\3\6\4\12\0"+
    "\1\3\2\4\2\0\3\4\1\0\2\4\1\0\2\4"+
    "\1\0\1\3\1\4\4\0\7\4\1\0\21\4\1\206"+
    "\24\4\4\0\1\3\6\4\12\0\1\3\2\4\2\0"+
    "\3\4\1\0\2\4\1\0\2\4\1\0\1\3\1\4"+
    "\4\0\5\4\1\207\1\4\1\0\46\4\4\0\1\3"+
    "\6\4\12\0\1\3\2\4\2\0\3\4\1\0\2\4"+
    "\1\0\2\4\1\0\1\3\1\4\4\0\7\4\1\0"+
    "\21\4\1\210\24\4\4\0\1\3\6\4\12\0\1\3"+
    "\2\4\2\0\3\4\1\0\2\4\1\0\2\4\1\0"+
    "\1\3\1\4\4\0\7\4\1\0\3\4\1\211\42\4"+
    "\4\0\1\3\6\4\12\0\1\3\2\4\2\0\3\4"+
    "\1\0\2\4\1\0\2\4\1\0\1\3\1\4\4\0"+
    "\7\4\1\0\13\4\1\122\32\4\4\0\1\3\6\4"+
    "\12\0\1\3\2\4\2\0\3\4\1\0\2\4\1\0"+
    "\2\4\1\0\1\3\1\4\4\0\4\4\1\212\2\4"+
    "\1\0\46\4\4\0\1\3\6\4\12\0\1\3\2\4"+
    "\2\0\3\4\1\0\2\4\1\0\2\4\1\0\1\3"+
    "\1\4\4\0\7\4\1\0\17\4\1\213\26\4\4\0"+
    "\1\3\6\4\12\0\1\3\2\4\2\0\3\4\1\0"+
    "\2\4\1\0\2\4\1\0\1\3\1\4\4\0\7\4"+
    "\1\0\13\4\1\214\32\4\4\0\1\3\6\4\12\0"+
    "\1\3\2\4\2\0\3\4\1\0\2\4\1\0\2\4"+
    "\1\0\1\3\1\4\4\0\6\4\1\215\1\0\46\4"+
    "\4\0\1\3\6\4\12\0\1\3\2\4\2\0\3\4"+
    "\1\0\2\4\1\0\2\4\1\0\1\3\1\4\4\0"+
    "\2\4\1\216\4\4\1\0\46\4\4\0\1\3\6\4"+
    "\12\0\1\3\2\4\2\0\3\4\1\0\2\4\1\0"+
    "\2\4\1\0\1\3\1\4\4\0\1\4\1\210\5\4"+
    "\1\0\46\4\4\0\1\3\6\4\12\0\1\3\2\4"+
    "\2\0\3\4\1\0\2\4\1\0\2\4\1\0\1\3"+
    "\1\4\4\0\6\4\1\217\1\0\46\4\4\0\1\3"+
    "\6\4\12\0\1\3\2\4\2\0\3\4\1\0\2\4"+
    "\1\0\2\4\1\0\1\3\1\4\4\0\3\4\1\220"+
    "\3\4\1\0\46\4\4\0\1\3\6\4\12\0\1\3"+
    "\2\4\2\0\3\4\1\0\2\4\1\0\2\4\1\0"+
    "\1\3\1\4\4\0\4\4\1\221\2\4\1\0\46\4"+
    "\4\0\1\3\6\4\12\0\1\3\2\4\2\0\3\4"+
    "\1\0\2\4\1\0\2\4\1\0\1\3\1\4\4\0"+
    "\7\4\1\0\4\4\1\222\41\4\4\0\1\3\6\4"+
    "\12\0\1\3\2\4\2\0\3\4\1\0\2\4\1\0"+
    "\2\4\1\0\1\3\1\4\4\0\6\4\1\223\1\0"+
    "\46\4\4\0\1\3\6\4\12\0\1\3\2\4\2\0"+
    "\3\4\1\0\2\4\1\0\2\4\1\0\1\3\1\4"+
    "\4\0\2\4\1\224\1\111\3\4\1\0\46\4\4\0"+
    "\1\3\6\4\12\0\1\3\2\4\2\0\3\4\1\0"+
    "\2\4\1\0\2\4\1\0\1\3\1\4\4\0\7\4"+
    "\1\0\3\4\1\225\42\4\4\0\1\3\6\4\12\0"+
    "\1\3\2\4\2\0\3\4\1\0\2\4\1\0\2\4"+
    "\1\0\1\3\1\4\4\0\6\4\1\226\1\0\46\4"+
    "\4\0\1\3\6\4\12\0\1\3\2\4\2\0\3\4"+
    "\1\0\2\4\1\0\2\4\1\0\1\3\1\4\4\0"+
    "\7\4\1\0\12\4\1\111\32\4\1\227\4\0\1\3"+
    "\6\4\12\0\1\3\2\4\2\0\1\4\1\230\1\4"+
    "\1\0\2\4\1\0\2\4\1\0\1\3\1\4\4\0"+
    "\7\4\1\0\46\4\4\0\1\3\6\4\12\0\1\3"+
    "\2\4\2\0\3\4\1\0\2\4\1\0\2\4\1\0"+
    "\1\3\1\4\4\0\7\4\1\0\13\4\1\231\32\4"+
    "\4\0\1\3\6\4\12\0\1\3\2\4\2\0\3\4"+
    "\1\0\2\4\1\0\2\4\1\0\1\3\1\4\4\0"+
    "\7\4\1\0\13\4\1\232\32\4\4\0\1\3\6\4"+
    "\12\0\1\3\2\4\2\0\3\4\1\0\2\4\1\0"+
    "\2\4\1\0\1\3\1\4\4\0\7\4\1\0\3\4"+
    "\1\233\42\4\4\0\1\3\6\4\12\0\1\3\2\4"+
    "\2\0\1\234\2\4\1\0\2\4\1\0\2\4\1\0"+
    "\1\3\1\4\4\0\7\4\1\0\46\4\4\0\1\3"+
    "\6\4\12\0\1\3\2\4\2\0\3\4\1\0\2\4"+
    "\1\0\2\4\1\0\1\3\1\4\4\0\1\4\1\235"+
    "\5\4\1\0\46\4\4\0\1\3\6\4\12\0\1\3"+
    "\2\4\2\0\3\4\1\0\2\4\1\0\2\4\1\0"+
    "\1\3\1\4\4\0\7\4\1\0\12\4\1\111\33\4"+
    "\4\0\1\3\6\4\12\0\1\3\2\4\2\0\1\4"+
    "\1\236\1\4\1\0\2\4\1\0\2\4\1\0\1\3"+
    "\1\4\4\0\7\4\1\0\46\4\4\0\1\3\6\4"+
    "\12\0\1\3\2\4\2\0\3\4\1\0\2\4\1\0"+
    "\2\4\1\0\1\3\1\4\4\0\7\4\1\0\31\4"+
    "\1\111\14\4\4\0\1\3\6\4\12\0\1\3\2\4"+
    "\2\0\3\4\1\0\2\4\1\0\2\4\1\0\1\3"+
    "\1\4\4\0\7\4\1\0\12\4\1\237\33\4\4\0"+
    "\1\3\6\4\12\0\1\3\2\4\2\0\3\4\1\0"+
    "\2\4\1\0\2\4\1\0\1\3\1\4\4\0\7\4"+
    "\1\0\1\111\45\4\4\0\1\3\6\4\12\0\1\3"+
    "\2\4\2\0\3\4\1\0\2\4\1\0\2\4\1\0"+
    "\1\3\1\4\4\0\3\4\1\111\3\4\1\0\46\4"+
    "\4\0\1\3\6\4\12\0\1\3\2\4\2\0\3\4"+
    "\1\0\2\4\1\0\2\4\1\0\1\3\1\4\4\0"+
    "\7\4\1\0\21\4\1\240\24\4\4\0\1\3\6\4"+
    "\12\0\1\3\2\4\2\0\3\4\1\0\2\4\1\0"+
    "\2\4\1\0\1\3\1\4\4\0\4\4\1\241\2\4"+
    "\1\0\46\4\4\0\1\3\6\4\12\0\1\3\2\4"+
    "\2\0\3\4\1\0\2\4\1\0\2\4\1\0\1\3"+
    "\1\4\4\0\4\4\1\232\2\4\1\0\46\4\4\0"+
    "\1\3\6\4\12\0\1\3\2\4\2\0\3\4\1\0"+
    "\2\4\1\0\2\4\1\0\1\3\1\4\4\0\7\4"+
    "\1\0\12\4\1\242\1\4\1\243\31\4\54\0\1\244"+
    "\132\0\1\245\123\0\1\246\136\0\1\247\51\0\3\70"+
    "\1\163\1\70\1\163\1\70\12\0\1\70\1\163\1\70"+
    "\2\0\2\70\1\163\1\0\1\72\1\73\1\0\2\70"+
    "\1\0\2\70\4\0\5\70\1\73\1\70\1\0\17\70"+
    "\1\72\13\70\1\163\6\70\2\163\2\70\7\0\1\163"+
    "\1\0\1\163\14\0\1\163\5\0\1\163\60\0\1\163"+
    "\6\0\2\163\6\0\3\70\1\250\1\70\1\250\1\70"+
    "\1\251\10\0\1\251\1\70\1\250\1\70\2\0\2\70"+
    "\1\250\1\0\2\70\1\0\2\70\1\0\2\70\4\0"+
    "\7\70\1\0\33\70\1\250\6\70\2\250\2\70\4\0"+
    "\14\170\1\100\7\170\1\0\114\170\3\76\1\174\4\76"+
    "\3\170\1\0\110\170\1\76\6\170\1\171\5\170\1\76"+
    "\1\170\1\0\3\170\1\76\60\170\1\76\6\170\2\76"+
    "\6\170\14\0\1\171\113\0\5\170\1\173\6\170\1\171"+
    "\5\170\1\173\1\170\1\0\3\170\1\173\60\170\1\173"+
    "\6\170\2\173\11\170\4\252\5\170\1\100\5\170\1\252"+
    "\1\170\1\0\2\170\2\252\4\170\2\252\15\170\1\252"+
    "\3\170\1\252\2\170\1\252\1\170\1\252\4\170\1\252"+
    "\4\170\1\252\5\170\1\252\3\170\1\252\6\170\2\252"+
    "\6\170\3\103\4\253\12\103\1\200\1\253\2\103\1\201"+
    "\1\103\2\253\4\103\2\253\15\103\1\253\3\103\1\253"+
    "\2\103\1\253\1\103\1\253\4\103\1\253\4\103\1\253"+
    "\5\103\1\253\3\103\1\253\6\103\2\253\32\103\1\0"+
    "\103\103\1\3\6\4\12\0\1\3\2\4\2\0\3\4"+
    "\1\0\2\4\1\0\2\4\1\0\1\3\1\4\4\0"+
    "\7\4\1\0\14\4\1\122\31\4\4\0\3\70\4\203"+
    "\12\0\1\70\1\203\1\70\2\0\1\70\2\203\1\0"+
    "\1\254\1\255\1\0\2\203\1\0\2\70\4\0\5\70"+
    "\1\255\1\203\1\0\2\70\1\203\2\70\1\203\1\70"+
    "\1\203\4\70\1\203\2\70\1\254\1\70\1\203\5\70"+
    "\1\203\3\70\1\203\6\70\2\203\2\70\4\0\1\3"+
    "\6\4\12\0\1\3\2\4\2\0\3\4\1\0\2\4"+
    "\1\0\2\4\1\0\1\3\1\4\4\0\7\4\1\0"+
    "\35\4\1\256\10\4\4\0\1\3\6\4\12\0\1\3"+
    "\2\4\2\0\3\4\1\0\2\4\1\0\2\4\1\0"+
    "\1\3\1\4\4\0\7\4\1\0\42\4\1\257\3\4"+
    "\4\0\1\3\6\4\12\0\1\3\2\4\2\0\3\4"+
    "\1\0\2\4\1\0\2\4\1\0\1\3\1\4\4\0"+
    "\1\4\1\260\5\4\1\0\46\4\4\0\1\3\6\4"+
    "\12\0\1\3\2\4\2\0\3\4\1\0\2\4\1\0"+
    "\2\4\1\0\1\3\1\4\4\0\3\4\1\213\3\4"+
    "\1\0\46\4\4\0\1\3\6\4\12\0\1\3\2\4"+
    "\2\0\1\4\1\125\1\4\1\0\2\4\1\0\2\4"+
    "\1\0\1\3\1\4\4\0\7\4\1\0\46\4\4\0"+
    "\1\3\6\4\12\0\1\3\2\4\2\0\3\4\1\0"+
    "\2\4\1\0\2\4\1\0\1\3\1\4\4\0\3\4"+
    "\1\122\3\4\1\0\46\4\4\0\1\3\6\4\12\0"+
    "\1\3\2\4\2\0\3\4\1\0\2\4\1\0\2\4"+
    "\1\0\1\3\1\4\4\0\6\4\1\261\1\0\46\4"+
    "\4\0\1\3\6\4\12\0\1\3\2\4\2\0\3\4"+
    "\1\0\2\4\1\0\2\4\1\0\1\3\1\4\4\0"+
    "\4\4\1\262\2\4\1\0\46\4\4\0\1\3\6\4"+
    "\12\0\1\3\2\4\2\0\3\4\1\0\2\4\1\0"+
    "\2\4\1\0\1\3\1\4\4\0\7\4\1\0\4\4"+
    "\1\263\41\4\4\0\1\3\6\4\12\0\1\3\2\4"+
    "\2\0\3\4\1\0\2\4\1\0\2\4\1\0\1\3"+
    "\1\4\4\0\7\4\1\0\3\4\1\264\42\4\4\0"+
    "\1\3\6\4\12\0\1\3\2\4\2\0\1\4\1\265"+
    "\1\4\1\0\2\4\1\0\2\4\1\0\1\3\1\4"+
    "\4\0\7\4\1\0\46\4\4\0\1\3\6\4\12\0"+
    "\1\3\2\4\2\0\3\4\1\0\2\4\1\0\2\4"+
    "\1\0\1\3\1\4\4\0\6\4\1\122\1\0\46\4"+
    "\4\0\1\3\6\4\12\0\1\3\2\4\2\0\3\4"+
    "\1\0\2\4\1\0\2\4\1\0\1\3\1\4\4\0"+
    "\5\4\1\220\1\4\1\0\46\4\4\0\1\3\6\4"+
    "\12\0\1\3\2\4\2\0\3\4\1\0\2\4\1\0"+
    "\2\4\1\0\1\3\1\4\4\0\6\4\1\266\1\0"+
    "\46\4\4\0\1\3\6\4\12\0\1\3\2\4\2\0"+
    "\1\4\1\267\1\4\1\0\2\4\1\0\2\4\1\0"+
    "\1\3\1\4\4\0\7\4\1\0\46\4\4\0\1\3"+
    "\6\4\12\0\1\3\2\4\2\0\3\4\1\0\2\4"+
    "\1\0\2\4\1\0\1\3\1\4\4\0\7\4\1\0"+
    "\16\4\1\270\27\4\4\0\1\3\6\4\12\0\1\3"+
    "\2\4\2\0\3\4\1\0\2\4\1\0\2\4\1\0"+
    "\1\3\1\4\4\0\5\4\1\210\1\4\1\0\46\4"+
    "\4\0\1\3\6\4\12\0\1\3\2\4\2\0\1\4"+
    "\1\271\1\4\1\0\2\4\1\0\2\4\1\0\1\3"+
    "\1\4\4\0\7\4\1\0\46\4\4\0\1\3\6\4"+
    "\12\0\1\3\2\4\2\0\3\4\1\0\2\4\1\0"+
    "\2\4\1\0\1\3\1\4\4\0\6\4\1\272\1\0"+
    "\46\4\4\0\1\3\6\4\12\0\1\3\2\4\2\0"+
    "\3\4\1\0\2\4\1\0\2\4\1\0\1\3\1\4"+
    "\4\0\2\4\1\270\4\4\1\0\46\4\4\0\1\3"+
    "\6\4\12\0\1\3\2\4\2\0\3\4\1\0\2\4"+
    "\1\0\2\4\1\0\1\3\1\4\4\0\6\4\1\273"+
    "\1\0\46\4\4\0\1\3\6\4\12\0\1\3\2\4"+
    "\2\0\3\4\1\0\2\4\1\0\2\4\1\0\1\3"+
    "\1\4\4\0\1\4\1\111\5\4\1\0\46\4\4\0"+
    "\1\3\6\4\12\0\1\3\2\4\2\0\3\4\1\0"+
    "\2\4\1\0\2\4\1\0\1\3\1\4\4\0\7\4"+
    "\1\0\5\4\1\274\40\4\4\0\1\3\6\4\12\0"+
    "\1\3\2\4\2\0\3\4\1\0\2\4\1\0\2\4"+
    "\1\0\1\3\1\4\4\0\7\4\1\0\22\4\1\54"+
    "\23\4\4\0\1\3\6\4\12\0\1\3\2\4\2\0"+
    "\3\4\1\0\2\4\1\0\2\4\1\0\1\3\1\4"+
    "\4\0\7\4\1\0\17\4\1\275\26\4\4\0\1\3"+
    "\6\4\12\0\1\3\2\4\2\0\3\4\1\0\2\4"+
    "\1\0\2\4\1\0\1\3\1\4\4\0\7\4\1\0"+
    "\21\4\1\276\24\4\4\0\1\3\6\4\12\0\1\3"+
    "\2\4\2\0\3\4\1\0\2\4\1\0\2\4\1\0"+
    "\1\3\1\4\4\0\1\4\1\277\1\4\1\300\3\4"+
    "\1\0\46\4\4\0\1\3\6\4\12\0\1\3\2\4"+
    "\2\0\3\4\1\0\2\4\1\0\2\4\1\0\1\3"+
    "\1\4\4\0\7\4\1\0\2\4\1\301\3\4\1\302"+
    "\6\4\1\303\30\4\4\0\1\3\6\4\12\0\1\3"+
    "\2\4\2\0\3\4\1\0\2\4\1\0\2\4\1\0"+
    "\1\3\1\4\4\0\1\4\1\304\5\4\1\0\46\4"+
    "\4\0\1\3\6\4\12\0\1\3\2\4\2\0\3\4"+
    "\1\0\2\4\1\0\2\4\1\0\1\3\1\4\4\0"+
    "\7\4\1\0\14\4\1\111\31\4\4\0\1\3\6\4"+
    "\12\0\1\3\2\4\2\0\3\4\1\0\2\4\1\0"+
    "\2\4\1\0\1\3\1\4\4\0\4\4\1\305\2\4"+
    "\1\0\46\4\61\0\1\306\126\0\1\244\123\0\1\307"+
    "\113\0\1\310\73\0\3\70\1\250\1\70\1\250\1\70"+
    "\12\0\1\70\1\250\1\70\2\0\2\70\1\250\1\0"+
    "\1\70\1\167\1\0\2\167\1\0\2\70\4\0\5\70"+
    "\1\167\1\70\1\0\33\70\1\250\6\70\2\250\2\70"+
    "\7\0\1\250\1\0\1\250\14\0\1\250\5\0\1\250"+
    "\60\0\1\250\6\0\2\250\6\0\3\170\4\76\5\170"+
    "\1\100\5\170\1\76\1\170\1\0\2\170\2\76\4\170"+
    "\2\76\15\170\1\76\3\170\1\76\2\170\1\76\1\170"+
    "\1\76\4\170\1\76\4\170\1\76\5\170\1\76\3\170"+
    "\1\76\6\170\2\76\6\170\3\103\4\20\12\103\1\200"+
    "\1\20\2\103\1\201\1\103\2\20\4\103\2\20\15\103"+
    "\1\20\3\103\1\20\2\103\1\20\1\103\1\20\4\103"+
    "\1\20\4\103\1\20\5\103\1\20\3\103\1\20\6\103"+
    "\2\20\6\103\7\70\12\0\3\70\2\0\3\70\1\0"+
    "\1\70\1\311\1\0\2\70\1\0\2\70\4\0\5\70"+
    "\1\311\1\70\1\0\46\70\4\0\7\70\12\0\3\70"+
    "\2\0\3\70\1\0\1\311\1\70\1\0\2\70\1\0"+
    "\2\70\4\0\7\70\1\0\17\70\1\311\26\70\4\0"+
    "\1\3\6\4\11\0\1\312\1\3\2\4\2\0\3\4"+
    "\1\0\2\4\1\0\2\4\1\0\1\3\1\4\4\0"+
    "\7\4\1\0\46\4\4\0\1\3\6\4\12\0\1\3"+
    "\2\4\2\0\2\4\1\111\1\0\2\4\1\0\2\4"+
    "\1\0\1\3\1\4\4\0\7\4\1\0\46\4\4\0"+
    "\1\3\6\4\12\0\1\3\2\4\2\0\3\4\1\0"+
    "\2\4\1\0\2\4\1\0\1\3\1\4\4\0\7\4"+
    "\1\0\3\4\1\313\42\4\4\0\1\3\6\4\12\0"+
    "\1\3\2\4\2\0\3\4\1\0\2\4\1\0\2\4"+
    "\1\0\1\3\1\4\4\0\2\4\1\300\4\4\1\0"+
    "\46\4\4\0\1\3\6\4\12\0\1\3\2\4\2\0"+
    "\3\4\1\0\2\4\1\0\2\4\1\0\1\3\1\4"+
    "\4\0\7\4\1\0\14\4\1\314\31\4\4\0\1\3"+
    "\6\4\12\0\1\3\2\4\2\0\3\4\1\0\2\4"+
    "\1\0\2\4\1\0\1\3\1\4\4\0\7\4\1\0"+
    "\13\4\1\315\32\4\4\0\1\3\6\4\12\0\1\3"+
    "\2\4\2\0\3\4\1\0\2\4\1\0\2\4\1\0"+
    "\1\3\1\4\4\0\2\4\1\316\4\4\1\0\46\4"+
    "\4\0\1\3\6\4\11\0\1\317\1\3\2\4\2\0"+
    "\3\4\1\0\2\4\1\0\2\4\1\0\1\3\1\4"+
    "\4\0\7\4\1\0\46\4\4\0\1\3\6\4\12\0"+
    "\1\3\2\4\2\0\3\4\1\0\2\4\1\0\2\4"+
    "\1\0\1\3\1\4\4\0\7\4\1\0\13\4\1\320"+
    "\32\4\4\0\1\3\6\4\12\0\1\3\2\4\2\0"+
    "\3\4\1\0\2\4\1\0\2\4\1\0\1\3\1\4"+
    "\4\0\7\4\1\0\15\4\1\321\30\4\4\0\1\3"+
    "\6\4\12\0\1\3\2\4\2\0\3\4\1\0\2\4"+
    "\1\0\2\4\1\0\1\3\1\4\4\0\7\4\1\0"+
    "\35\4\1\122\10\4\4\0\1\3\6\4\12\0\1\3"+
    "\2\4\2\0\3\4\1\0\2\4\1\0\2\4\1\0"+
    "\1\3\1\4\4\0\7\4\1\0\36\4\1\322\7\4"+
    "\4\0\1\3\6\4\12\0\1\3\2\4\2\0\3\4"+
    "\1\0\2\4\1\0\2\4\1\0\1\3\1\4\4\0"+
    "\6\4\1\323\1\0\46\4\4\0\1\3\6\4\12\0"+
    "\1\3\2\4\2\0\1\4\1\324\1\4\1\0\2\4"+
    "\1\0\2\4\1\0\1\3\1\4\4\0\7\4\1\0"+
    "\46\4\4\0\1\3\6\4\12\0\1\3\2\4\2\0"+
    "\3\4\1\0\2\4\1\0\2\4\1\0\1\3\1\4"+
    "\4\0\7\4\1\0\13\4\1\325\32\4\4\0\1\3"+
    "\6\4\12\0\1\3\2\4\2\0\3\4\1\0\2\4"+
    "\1\0\2\4\1\0\1\3\1\4\4\0\6\4\1\326"+
    "\1\0\46\4\4\0\1\3\6\4\12\0\1\3\2\4"+
    "\2\0\3\4\1\0\2\4\1\0\2\4\1\0\1\3"+
    "\1\4\4\0\4\4\1\327\2\4\1\0\46\4\4\0"+
    "\1\3\6\4\12\0\1\3\2\4\2\0\3\4\1\0"+
    "\2\4\1\0\2\4\1\0\1\3\1\4\4\0\1\4"+
    "\1\122\5\4\1\0\46\4\4\0\1\3\6\4\12\0"+
    "\1\3\2\4\2\0\3\4\1\0\2\4\1\0\2\4"+
    "\1\0\1\3\1\4\4\0\7\4\1\0\3\4\1\152"+
    "\42\4\4\0\1\3\6\4\12\0\1\3\2\4\2\0"+
    "\3\4\1\0\2\4\1\0\2\4\1\0\1\3\1\4"+
    "\4\0\4\4\1\145\2\4\1\0\46\4\4\0\1\3"+
    "\6\4\12\0\1\3\2\4\2\0\1\4\1\145\1\4"+
    "\1\0\2\4\1\0\2\4\1\0\1\3\1\4\4\0"+
    "\7\4\1\0\46\4\4\0\1\3\6\4\12\0\1\3"+
    "\2\4\2\0\3\4\1\0\2\4\1\0\1\4\1\330"+
    "\1\0\1\3\1\4\4\0\7\4\1\0\14\4\1\331"+
    "\31\4\4\0\1\3\6\4\12\0\1\3\2\4\2\0"+
    "\1\4\1\332\1\4\1\0\2\4\1\0\2\4\1\0"+
    "\1\3\1\4\4\0\7\4\1\0\46\4\17\0\1\333"+
    "\165\0\1\244\3\0\1\306\53\0\1\310\1\334\4\310"+
    "\4\334\1\310\1\334\2\0\2\334\1\0\2\310\2\0"+
    "\3\310\1\0\2\310\1\334\2\310\1\0\1\334\1\310"+
    "\4\334\7\310\1\334\46\310\2\0\1\334\17\0\1\335"+
    "\111\0\1\3\6\4\12\0\1\3\2\4\2\0\3\4"+
    "\1\0\2\4\1\0\2\4\1\0\1\3\1\4\4\0"+
    "\7\4\1\0\13\4\1\336\32\4\4\0\1\3\6\4"+
    "\12\0\1\3\2\4\2\0\1\4\1\337\1\4\1\0"+
    "\2\4\1\0\2\4\1\0\1\3\1\4\4\0\7\4"+
    "\1\0\46\4\4\0\1\3\6\4\12\0\1\3\2\4"+
    "\2\0\3\4\1\0\2\4\1\0\2\4\1\0\1\3"+
    "\1\4\4\0\1\4\1\340\5\4\1\0\46\4\4\0"+
    "\1\3\6\4\12\0\1\3\2\4\2\0\3\4\1\0"+
    "\2\4\1\0\2\4\1\0\1\3\1\4\4\0\7\4"+
    "\1\0\3\4\1\341\42\4\22\0\1\342\111\0\1\3"+
    "\6\4\12\0\1\3\2\4\2\0\3\4\1\0\2\4"+
    "\1\0\2\4\1\0\1\3\1\4\4\0\7\4\1\0"+
    "\15\4\1\343\30\4\4\0\1\3\6\4\12\0\1\3"+
    "\2\4\2\0\3\4\1\0\2\4\1\0\2\4\1\0"+
    "\1\3\1\4\4\0\4\4\1\344\2\4\1\0\46\4"+
    "\4\0\1\3\6\4\12\0\1\3\2\4\2\0\3\4"+
    "\1\0\2\4\1\0\1\4\1\345\1\0\1\3\1\4"+
    "\4\0\7\4\1\0\46\4\4\0\1\3\6\4\12\0"+
    "\1\3\2\4\2\0\3\4\1\0\2\4\1\0\2\4"+
    "\1\0\1\3\1\4\4\0\7\4\1\0\12\4\1\346"+
    "\33\4\4\0\1\3\6\4\12\0\1\3\2\4\2\0"+
    "\3\4\1\0\2\4\1\0\2\4\1\0\1\3\1\4"+
    "\4\0\5\4\1\122\1\4\1\0\46\4\4\0\1\3"+
    "\6\4\12\0\1\3\2\4\2\0\3\4\1\0\2\4"+
    "\1\0\2\4\1\0\1\3\1\4\4\0\7\4\1\0"+
    "\12\4\1\122\33\4\4\0\1\3\3\4\1\111\2\4"+
    "\12\0\1\3\2\4\2\0\3\4\1\0\2\4\1\0"+
    "\2\4\1\0\1\3\1\4\4\0\7\4\1\0\6\4"+
    "\1\111\6\4\1\347\7\4\1\350\20\4\4\0\1\3"+
    "\6\4\12\0\1\3\2\4\2\0\3\4\1\0\2\4"+
    "\1\0\2\4\1\0\1\3\1\4\4\0\7\4\1\0"+
    "\12\4\1\351\33\4\4\0\1\3\6\4\12\0\1\3"+
    "\2\4\2\0\3\4\1\0\2\4\1\0\2\4\1\0"+
    "\1\3\1\4\4\0\7\4\1\0\13\4\1\352\32\4"+
    "\4\0\1\3\6\4\12\0\1\3\2\4\2\0\3\4"+
    "\1\0\2\4\1\0\2\4\1\0\1\3\1\4\4\0"+
    "\7\4\1\0\13\4\1\353\32\4\4\0\1\3\6\4"+
    "\12\0\1\3\2\4\2\0\3\4\1\0\2\4\1\0"+
    "\2\4\1\0\1\3\1\4\4\0\7\4\1\0\12\4"+
    "\1\240\33\4\17\0\1\310\122\0\1\354\14\0\1\355"+
    "\7\0\1\356\24\0\1\357\3\0\1\360\1\361\1\0"+
    "\1\362\3\0\1\363\2\0\1\364\1\0\1\365\1\366"+
    "\3\0\1\367\1\370\6\0\2\355\3\0\1\371\5\0"+
    "\1\3\6\4\12\0\1\3\2\4\2\0\3\4\1\0"+
    "\2\4\1\0\2\4\1\0\1\3\1\4\4\0\4\4"+
    "\1\372\2\4\1\0\46\4\4\0\1\3\6\4\12\0"+
    "\1\3\2\4\2\0\3\4\1\0\2\4\1\0\2\4"+
    "\1\0\1\3\1\4\4\0\1\4\1\373\5\4\1\0"+
    "\46\4\4\0\1\3\6\4\12\0\1\3\2\4\2\0"+
    "\3\4\1\0\2\4\1\0\2\4\1\0\1\3\1\4"+
    "\4\0\7\4\1\0\12\4\1\210\33\4\37\0\1\374"+
    "\23\0\1\375\1\376\3\0\1\377\1\u0100\5\0\1\u0101"+
    "\2\0\1\u0100\1\0\1\u0102\1\u0103\1\0\1\u0104\24\0"+
    "\1\3\6\4\12\0\1\3\2\4\2\0\3\4\1\0"+
    "\2\4\1\0\2\4\1\0\1\3\1\4\4\0\4\4"+
    "\1\344\2\4\1\0\13\4\1\u0105\32\4\4\0\1\3"+
    "\6\4\12\0\1\3\2\4\2\0\3\4\1\0\2\4"+
    "\1\0\2\4\1\0\1\3\1\4\4\0\5\4\1\u0106"+
    "\1\4\1\0\46\4\4\0\1\3\6\4\12\0\1\3"+
    "\2\4\2\0\3\4\1\0\2\4\1\0\2\4\1\0"+
    "\1\3\1\4\4\0\7\4\1\0\27\4\1\u0107\16\4"+
    "\4\0\1\3\6\4\11\0\1\u0108\1\3\2\4\2\0"+
    "\3\4\1\0\2\4\1\0\2\4\1\0\1\3\1\4"+
    "\4\0\7\4\1\0\46\4\4\0\1\3\6\4\12\0"+
    "\1\3\2\4\2\0\3\4\1\0\2\4\1\0\2\4"+
    "\1\0\1\3\1\4\4\0\7\4\1\0\3\4\1\u0109"+
    "\42\4\4\0\1\3\6\4\12\0\1\3\2\4\2\0"+
    "\3\4\1\0\1\4\1\111\1\0\2\4\1\0\1\3"+
    "\1\4\4\0\7\4\1\0\46\4\4\0\1\3\6\4"+
    "\12\0\1\3\2\4\2\0\3\4\1\0\2\4\1\0"+
    "\2\4\1\0\1\3\1\4\4\0\7\4\1\0\17\4"+
    "\1\220\26\4\4\0\1\3\6\4\12\0\1\3\2\4"+
    "\2\0\1\4\1\u010a\1\4\1\0\2\4\1\0\2\4"+
    "\1\0\1\3\1\4\4\0\7\4\1\0\46\4\4\0"+
    "\1\3\6\4\12\0\1\3\2\4\2\0\1\4\1\151"+
    "\1\4\1\0\2\4\1\0\2\4\1\0\1\3\1\4"+
    "\4\0\7\4\1\0\46\4\123\0\1\u010b\37\0\1\u010c"+
    "\161\0\1\u010d\124\0\1\u010e\123\0\1\u010f\16\0\1\u0110"+
    "\105\0\1\u0111\20\0\1\u0112\111\0\1\u0113\104\0\1\u0114"+
    "\22\0\1\u0115\25\0\1\355\101\0\1\u0116\16\0\1\u0117"+
    "\110\0\1\u0118\1\0\1\u0119\23\0\1\355\126\0\1\u011a"+
    "\57\0\1\u011b\175\0\1\u011c\32\0\1\3\6\4\12\0"+
    "\1\3\2\4\2\0\1\4\1\u011d\1\4\1\0\2\4"+
    "\1\0\2\4\1\0\1\3\1\4\4\0\7\4\1\0"+
    "\46\4\4\0\1\3\6\4\12\0\1\3\2\4\2\0"+
    "\1\4\1\210\1\4\1\0\2\4\1\0\2\4\1\0"+
    "\1\3\1\4\4\0\7\4\1\0\46\4\65\0\1\u011e"+
    "\5\0\1\u011f\12\0\1\u0120\101\0\1\u0121\20\0\1\u0122"+
    "\100\0\1\u0123\12\0\1\u0124\13\0\1\u0125\101\0\1\u0126"+
    "\4\0\1\u0127\133\0\1\u0128\121\0\1\u0129\130\0\1\u012a"+
    "\103\0\1\u012b\175\0\1\u012c\32\0\1\3\6\4\12\0"+
    "\1\3\2\4\2\0\1\4\1\u012d\1\4\1\0\2\4"+
    "\1\0\2\4\1\0\1\3\1\4\4\0\7\4\1\0"+
    "\46\4\4\0\1\3\6\4\12\0\1\3\2\4\2\0"+
    "\3\4\1\0\2\4\1\0\2\4\1\0\1\3\1\4"+
    "\4\0\6\4\1\111\1\0\46\4\4\0\1\3\6\4"+
    "\12\0\1\3\2\4\2\0\3\4\1\0\2\4\1\0"+
    "\2\4\1\0\1\3\1\4\4\0\7\4\1\0\13\4"+
    "\1\u012e\32\4\22\0\1\u012f\111\0\1\3\3\4\1\u0130"+
    "\2\4\12\0\1\3\2\4\2\0\3\4\1\0\2\4"+
    "\1\0\2\4\1\0\1\3\1\4\4\0\7\4\1\0"+
    "\46\4\4\0\1\3\6\4\12\0\1\3\2\4\2\0"+
    "\3\4\1\0\2\4\1\0\2\4\1\0\1\3\1\4"+
    "\4\0\7\4\1\0\4\4\1\u0106\41\4\101\0\1\u0131"+
    "\124\0\1\u0132\110\0\1\u0133\135\0\1\u0134\137\0\1\355"+
    "\65\0\1\u0135\45\0\1\u0136\106\0\1\u0137\101\0\1\u0138"+
    "\21\0\1\u0139\132\0\1\u013a\163\0\1\u013b\71\0\1\u013c"+
    "\125\0\1\u013d\134\0\1\u013e\122\0\1\u013f\133\0\1\u0140"+
    "\123\0\1\u0141\151\0\1\u0142\120\0\1\u0143\45\0\1\3"+
    "\6\4\12\0\1\3\2\4\2\0\3\4\1\0\2\4"+
    "\1\0\2\4\1\0\1\3\1\4\4\0\5\4\1\111"+
    "\1\4\1\0\46\4\33\0\1\u0144\147\0\1\u0145\134\0"+
    "\1\u0146\122\0\1\u0147\20\0\1\u0148\133\0\1\u0149\107\0"+
    "\1\u014a\143\0\1\u014b\4\0\1\u014c\123\0\1\u014d\65\0"+
    "\1\u014e\147\0\1\u014f\141\0\1\u0150\130\0\1\u0151\74\0"+
    "\1\u0152\151\0\1\u0153\140\0\1\u0154\45\0\1\3\6\4"+
    "\12\0\1\3\2\4\2\0\3\4\1\0\2\4\1\0"+
    "\2\4\1\0\1\3\1\4\4\0\7\4\1\0\21\4"+
    "\1\u0106\24\4\4\0\1\3\6\4\12\0\1\3\2\4"+
    "\2\0\3\4\1\0\2\4\1\0\2\4\1\0\1\3"+
    "\1\4\4\0\7\4\1\0\13\4\1\u0155\32\4\12\0"+
    "\1\u0156\24\0\1\u0157\1\0\1\u0158\22\0\1\u0159\3\0"+
    "\1\u015a\1\u015b\1\0\1\u015c\3\0\1\u015d\2\0\1\u015e"+
    "\1\0\1\u015f\2\0\1\u0160\1\0\1\u0161\1\u0162\1\0"+
    "\1\u0163\1\0\1\u0164\15\0\1\3\6\4\12\0\1\3"+
    "\2\4\2\0\1\4\1\u0165\1\4\1\0\2\4\1\0"+
    "\2\4\1\0\1\3\1\4\4\0\7\4\1\0\46\4"+
    "\56\0\1\u0166\147\0\1\u0167\110\0\1\u0168\145\0\1\u0169"+
    "\114\0\1\u016a\141\0\1\u016b\121\0\1\u016c\117\0\1\u016d"+
    "\152\0\1\u016e\106\0\1\u016f\151\0\1\u0170\2\0\1\u0170"+
    "\125\0\1\355\136\0\1\370\72\0\1\u0171\101\0\1\u0172"+
    "\41\0\1\u0173\13\0\1\u0174\4\0\1\u0175\6\0\1\u0172"+
    "\1\u0176\103\0\1\u0177\107\0\1\u0178\125\0\1\u0179\127\0"+
    "\1\355\151\0\1\u017a\111\0\1\u017b\147\0\1\u017c\113\0"+
    "\1\u017d\3\0\1\u017e\11\0\1\u017f\105\0\1\u0180\133\0"+
    "\1\u0181\76\0\1\u0182\147\0\1\u0183\150\0\1\u0184\135\0"+
    "\1\u0185\100\0\1\u0186\140\0\1\u0187\3\0\1\u017e\11\0"+
    "\1\u017f\126\0\1\u014c\106\0\1\u0188\147\0\1\u0189\133\0"+
    "\1\u018a\114\0\1\u018b\42\0\1\3\6\4\12\0\1\3"+
    "\2\4\2\0\1\4\1\u018c\1\4\1\0\2\4\1\0"+
    "\2\4\1\0\1\3\1\4\4\0\7\4\1\0\46\4"+
    "\57\0\1\u018d\103\0\1\u018e\22\0\1\u018f\6\0\1\u0190"+
    "\75\0\1\u0191\23\0\1\u0192\126\0\1\u0193\1\u0194\5\0"+
    "\1\u0195\7\0\1\u0196\105\0\1\u0197\1\u0198\3\0\1\u0199"+
    "\134\0\1\u019a\7\0\1\u019b\107\0\1\u019c\147\0\1\u019d"+
    "\112\0\1\u019e\150\0\1\u019f\127\0\1\u01a0\123\0\1\u01a1"+
    "\65\0\1\u01a2\175\0\1\u01a3\106\0\1\u01a4\4\0\1\u01a5"+
    "\46\0\1\3\6\4\12\0\1\3\2\4\2\0\3\4"+
    "\1\0\2\4\1\0\2\4\1\0\1\3\1\4\4\0"+
    "\3\4\1\u0106\3\4\1\0\46\4\54\0\1\u01a6\133\0"+
    "\1\u01a7\140\0\1\u01a8\134\0\1\u01a9\60\0\1\u0172\71\0"+
    "\2\u0172\124\0\1\355\136\0\1\u01aa\56\0\1\u01ab\125\0"+
    "\1\u01ac\161\0\1\u0174\4\0\1\u0175\121\0\1\355\100\0"+
    "\1\u01ad\172\0\1\u01ae\65\0\1\u010f\131\0\1\u01af\125\0"+
    "\1\u01b0\156\0\1\u0174\115\0\1\u01b1\121\0\1\u01b2\135\0"+
    "\1\u01b3\122\0\1\u017c\116\0\1\u01b4\137\0\1\u01b5\13\0"+
    "\1\u01b6\131\0\1\u01b7\57\0\1\u01b8\171\0\1\u01b9\117\0"+
    "\1\u01ba\115\0\1\u01b4\132\0\1\u01bb\124\0\1\u01bc\107\0"+
    "\1\u01bd\154\0\1\u01b4\134\0\1\u01b5\152\0\1\u01be\107\0"+
    "\1\u01bf\11\0\1\u01c0\104\0\1\u01c1\130\0\1\u01c2\53\0"+
    "\1\3\6\4\12\0\1\3\2\4\2\0\3\4\1\0"+
    "\2\4\1\0\2\4\1\0\1\3\1\4\4\0\7\4"+
    "\1\0\16\4\1\111\27\4\57\0\1\u01c3\150\0\1\u01c4"+
    "\102\0\1\u01c5\20\0\1\u01c6\66\0\1\u01c7\151\0\1\u01c8"+
    "\105\0\1\u01c9\171\0\1\u01ca\112\0\1\u01cb\135\0\1\u01cc"+
    "\121\0\1\u01cd\102\0\1\u01ce\153\0\1\u01cf\123\0\1\u01d0"+
    "\141\0\1\u01d1\75\0\1\u01d2\164\0\1\u01d3\115\0\1\u01d4"+
    "\126\0\1\u01d5\125\0\1\u01d6\142\0\1\u01d7\144\0\1\u01d8"+
    "\56\0\1\u01d9\130\0\1\u01da\177\0\1\u01db\111\0\1\u01dc"+
    "\130\0\1\u01dd\136\0\1\u01de\112\0\1\u01df\125\0\1\u01e0"+
    "\127\0\1\u01e1\61\0\1\355\1\0\1\u01e2\23\0\1\u0143"+
    "\1\u01e3\30\0\1\u01e4\1\u01e5\10\0\1\u01e6\6\0\1\u01e7"+
    "\4\0\1\u01e8\21\0\1\355\1\0\1\u01e2\23\0\1\u0143"+
    "\1\u01e3\30\0\1\u01e4\1\u01e5\10\0\1\u01e9\6\0\1\u01e7"+
    "\4\0\1\u01e8\53\0\1\u01ea\143\0\1\u01eb\147\0\1\u01ec"+
    "\104\0\1\u01ed\150\0\1\355\106\0\1\u01ee\142\0\1\u01ef"+
    "\136\0\1\u01f0\127\0\1\u01f1\106\0\1\u01f2\131\0\1\u01f3"+
    "\152\0\1\u01f4\122\0\1\u01f5\113\0\1\u01f6\123\0\1\u01f7"+
    "\106\0\1\u01f8\161\0\1\u01f9\120\0\1\u01fa\104\0\1\u01fb"+
    "\127\0\1\u01fc\152\0\1\u01fd\131\0\1\u01fe\127\0\1\u01d8"+
    "\145\0\1\u01ff\104\0\1\u0200\146\0\1\u0201\140\0\1\u0202"+
    "\57\0\1\u0203\163\0\1\u0204\73\0\1\u0205\147\0\1\u0206"+
    "\132\0\1\u0207\141\0\1\u0208\6\0\1\u0209\16\0\1\u020a"+
    "\106\0\1\u01c5\114\0\1\u020b\132\0\1\u020c\75\0\1\u020d"+
    "\36\0\1\u020e\112\0\1\u020f\156\0\1\u0210\35\0\1\u0211"+
    "\24\0\1\u0211\33\0\1\u0212\13\0\1\u0213\120\0\1\u01c5"+
    "\125\0\1\u0214\20\0\1\u0206\63\0\1\u0215\142\0\1\u0216"+
    "\121\0\1\u0217\76\0\1\355\71\0\1\355\61\0\1\u0218"+
    "\150\0\1\u0219\122\0\1\u021a\153\0\1\u021b\74\0\1\u021c"+
    "\122\0\1\u021d\141\0\1\u021e\75\0\1\u0143\31\0\1\u021f"+
    "\155\0\1\u0220\47\0\1\u0143\136\0\1\u0221\157\0\1\u0222"+
    "\110\0\1\u0223\134\0\1\u0224\127\0\1\u0225\136\0\1\u0226"+
    "\130\0\1\u0227\1\u0228\10\0\1\u0229\105\0\1\u022a\110\0"+
    "\1\u022b\171\0\1\u01b4\120\0\1\u0182\134\0\1\u022c\123\0"+
    "\1\u01b4\73\0\1\u022d\145\0\1\u022e\151\0\1\u022f\124\0"+
    "\1\u0230\131\0\1\u0231\102\0\1\u0232\130\0\1\u0233\150\0"+
    "\1\u0234\44\0\1\u0235\24\0\1\u0235\1\0\1\u0236\31\0"+
    "\1\u0237\13\0\1\u0238\104\0\1\u0239\12\0\1\u023a\105\0"+
    "\1\u01c5\131\0\1\u01c6\145\0\1\u023b\117\0\1\u023c\115\0"+
    "\1\u023d\134\0\1\u01c5\143\0\1\u01c6\111\0\1\u023e\127\0"+
    "\1\u023f\131\0\1\u0240\57\0\1\u0241\26\0\1\u0242\24\0"+
    "\1\u0243\3\0\1\u0244\2\0\1\u0245\3\0\1\u023a\107\0"+
    "\1\u0246\144\0\1\u0247\125\0\1\u0248\70\0\1\u0249\152\0"+
    "\1\u024a\163\0\1\u024b\70\0\1\u024c\160\0\1\u024d\140\0"+
    "\1\u024e\45\0\1\u020d\165\0\1\u024f\5\0\1\u0250\124\0"+
    "\1\u0251\113\0\1\367\162\0\1\355\73\0\1\u0252\76\0"+
    "\1\355\66\0\1\355\6\0\2\355\44\0\1\u0251\120\0"+
    "\1\u0253\156\0\1\u01b2\146\0\1\u0254\104\0\1\u0255\126\0"+
    "\1\u0256\124\0\1\u0251\127\0\1\355\143\0\1\355\127\0"+
    "\1\u0257\126\0\1\u0258\145\0\1\u0259\126\0\1\u025a\60\0"+
    "\1\u025b\154\0\1\u025c\126\0\1\u025d\130\0\1\u025e\126\0"+
    "\1\u025f\126\0\1\u0260\145\0\1\u0261\111\0\1\u0262\131\0"+
    "\1\u0260\121\0\1\u017c\132\0\1\u01c6\142\0\1\u0263\11\0"+
    "\1\u0264\137\0\1\u0265\56\0\1\u0266\141\0\1\u0267\160\0"+
    "\1\u0266\110\0\1\u0268\120\0\1\u0202\141\0\1\u0269\100\0"+
    "\1\u01c5\22\0\1\u01c5\3\0\2\u01c5\1\0\1\u01c5\3\0"+
    "\1\u01c5\110\0\1\u026a\145\0\1\u026b\110\0\1\u026b\144\0"+
    "\1\u026c\111\0\1\u026d\104\0\1\u026e\146\0\1\u026f\12\0"+
    "\1\u0268\115\0\1\u0270\27\0\1\u0271\120\0\1\u0272\111\0"+
    "\1\u0273\143\0\1\u0202\115\0\1\u0274\141\0\1\u01c6\150\0"+
    "\1\u0275\74\0\1\u0276\127\0\1\u0277\133\0\1\u0278\134\0"+
    "\1\u01d8\71\0\1\u0279\174\0\1\u027a\102\0\1\355\134\0"+
    "\1\355\144\0\1\u0251\107\0\1\u027b\127\0\1\u027c\132\0"+
    "\1\u0251\133\0\1\u027d\104\0\1\u022b\22\0\1\u027e\3\0"+
    "\1\u027f\1\u0280\1\0\1\u0281\3\0\1\u0282\125\0\1\u0283"+
    "\65\0\1\u0284\150\0\1\u0262\147\0\1\u0285\66\0\1\u0286"+
    "\164\0\1\u0287\1\u0288\71\0\1\u0289\172\0\1\u01b4\127\0"+
    "\1\u0262\134\0\1\u0271\57\0\1\u028a\154\0\1\u028b\133\0"+
    "\1\u01d8\123\0\1\u028c\135\0\1\u028d\115\0\1\u028e\65\0"+
    "\1\u0235\24\0\1\u0235\33\0\1\u0237\13\0\1\u0238\100\0"+
    "\1\u028f\145\0\1\u0290\104\0\1\u0291\154\0\1\u0292\62\0"+
    "\1\u0293\171\0\1\u0294\127\0\1\u0295\105\0\1\u0296\152\0"+
    "\1\u01d8\126\0\1\u0297\112\0\1\u0298\102\0\1\u0299\162\0"+
    "\1\u0278\116\0\1\u01d8\125\0\1\u029a\130\0\1\u0206\133\0"+
    "\1\u029b\105\0\1\u0143\1\u029c\31\0\1\u01e5\24\0\1\u01af"+
    "\70\0\1\u029d\140\0\1\u029e\124\0\1\u029f\75\0\1\u02a0"+
    "\170\0\1\u02a1\133\0\1\u02a2\107\0\1\u02a3\123\0\1\u02a4"+
    "\143\0\1\u02a5\1\u0262\130\0\1\u0262\140\0\1\u02a6\126\0"+
    "\1\u02a7\117\0\1\u01b4\111\0\1\u01d8\106\0\1\u02a8\162\0"+
    "\1\u01d8\130\0\1\u02a9\135\0\1\u02aa\144\0\1\u02ab\75\0"+
    "\1\u02ac\135\0\1\u0264\121\0\1\u02ad\144\0\1\u02ae\110\0"+
    "\1\u02af\131\0\1\u02b0\127\0\1\u02b1\137\0\1\u02b2\116\0"+
    "\1\u01d8\124\0\1\u02b3\106\0\1\u01c5\104\0\1\355\16\0"+
    "\1\355\71\0\2\355\40\0\1\u02b4\154\0\1\u02b5\126\0"+
    "\1\u02b6\123\0\1\u02b7\126\0\1\u02b8\131\0\1\u02b9\133\0"+
    "\1\u02ba\137\0\1\u0227\112\0\1\u02bb\151\0\1\u02bc\65\0"+
    "\1\u02bd\150\0\1\u02be\140\0\1\u01d8\120\0\1\u02bf\104\0"+
    "\1\u02c0\171\0\1\u02c1\127\0\1\u01d8\65\0\1\u02c2\170\0"+
    "\1\u02c3\113\0\1\u02c4\141\0\1\u0292\115\0\1\u02c5\134\0"+
    "\1\u02c6\117\0\1\u02c7\125\0\1\u0262\132\0\1\u0261\104\0"+
    "\1\u0262\154\0\1\u02c8\127\0\1\u0262\143\0\1\u0262\66\0"+
    "\1\u02c9\154\0\1\u02ca\123\0\1\u01b4\140\0\1\u02c4\115\0"+
    "\1\u02cb\151\0\1\u028a\131\0\1\u02cc\133\0\1\u02cd\116\0"+
    "\1\u01d8\131\0\1\u01d8\136\0\1\u02ce\120\0\1\u0278\110\0"+
    "\1\u0262\147\0\1\u02cf\105\0\1\u02b9\134\0\1\u02d0\127\0"+
    "\1\u0278\102\0\1\u02d1\147\0\1\u0292\151\0\1\u02d2\112\0"+
    "\1\u02d3\143\0\1\u01b4\130\0\1\u02d4\112\0\1\u02d5\143\0"+
    "\1\u02d6\125\0\1\u02d7\110\0\1\u0278\127\0\1\u01f2\134\0"+
    "\1\u02d8\122\0\1\u01d8\60\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[61600];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\4\1\1\11\1\1\1\11\16\1\2\11\32\1"+
    "\1\11\10\1\1\11\2\1\1\11\3\1\1\11\52\1"+
    "\4\0\1\1\1\0\4\1\1\11\7\1\1\11\42\1"+
    "\4\0\1\1\1\0\34\1\2\0\2\1\1\0\4\1"+
    "\1\0\13\1\3\0\4\1\1\0\11\1\1\0\1\11"+
    "\14\0\2\1\11\0\3\1\1\0\2\1\22\0\1\1"+
    "\17\0\2\1\1\0\1\1\44\0\1\1\5\0\1\1"+
    "\11\0\1\1\6\0\1\1\14\0\1\11\16\0\1\1"+
    "\3\0\1\1\47\0\1\11\20\0\1\11\22\0\1\11"+
    "\12\0\1\1\3\0\2\1\53\0\1\1\115\0\1\11"+
    "\101\0\1\1\64\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[728];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public ZScriptTokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	@Override
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 * @exception   IOException  if any I/O-Error occurs.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ZScriptTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ZScriptTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 200) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  @Override
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 31: 
          { int temp = zzStartRead;
								addToken(temp, temp+3, Token.RESERVED_WORD);
								addToken(temp+4, temp+5, Token.OPERATOR);
								addToken(temp+6, zzMarkedPos-1, Token.FUNCTION);
          }
        case 32: break;
        case 28: 
          { int temp = zzStartRead;
									addToken(temp, temp+3, Token.RESERVED_WORD);
									addToken(temp+4, temp+5, Token.OPERATOR);
									addToken(temp+6, zzMarkedPos-1, Token.FUNCTION);
          }
        case 33: break;
        case 25: 
          { addToken(Token.PREPROCESSOR);
          }
        case 34: break;
        case 19: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 35: break;
        case 8: 
          { addToken(Token.WHITESPACE);
          }
        case 36: break;
        case 21: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 37: break;
        case 14: 
          { addToken(Token.ERROR_CHAR); /*addNullToken(); return firstToken;*/
          }
        case 38: break;
        case 20: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 39: break;
        case 12: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 40: break;
        case 18: 
          { addToken(Token.RESERVED_WORD);
          }
        case 41: break;
        case 5: 
          { addToken(Token.SEPARATOR);
          }
        case 42: break;
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 43: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 44: break;
        case 13: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 45: break;
        case 6: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 46: break;
        case 17: 
          { addToken(Token.FUNCTION);
          }
        case 47: break;
        case 7: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 48: break;
        case 22: 
          { addToken(Token.DATA_TYPE);
          }
        case 49: break;
        case 1: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 50: break;
        case 15: 
          { addToken(Token.ERROR_CHAR);
          }
        case 51: break;
        case 27: 
          { int temp = zzStartRead;
									addToken(temp, temp+5, Token.RESERVED_WORD);
									addToken(temp+6, temp+7, Token.OPERATOR);
									addToken(temp+8, zzMarkedPos-1, Token.VARIABLE);
          }
        case 52: break;
        case 23: 
          { addToken(Token.LITERAL_BOOLEAN);
          }
        case 53: break;
        case 16: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 54: break;
        case 30: 
          { int temp = zzStartRead;
									addToken(temp, temp+5, Token.RESERVED_WORD);
									addToken(temp+6, temp+7, Token.OPERATOR);
									addToken(temp+8, zzMarkedPos-1, Token.FUNCTION);
          }
        case 55: break;
        case 24: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 56: break;
        case 11: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 57: break;
        case 29: 
          { int temp = zzStartRead;
								addToken(temp, temp+3, Token.RESERVED_WORD);
								addToken(temp+4, temp+5, Token.OPERATOR);
								addToken(temp+6, zzMarkedPos-1, Token.VARIABLE);
          }
        case 58: break;
        case 26: 
          { int temp = zzStartRead;
									addToken(temp, temp+3, Token.RESERVED_WORD);
									addToken(temp+4, temp+5, Token.OPERATOR);
									addToken(temp+6, zzMarkedPos-1, Token.VARIABLE);
          }
        case 59: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 60: break;
        case 4: 
          { addToken(Token.OPERATOR);
          }
        case 61: break;
        case 9: 
          { 
          }
        case 62: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 729: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 730: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
