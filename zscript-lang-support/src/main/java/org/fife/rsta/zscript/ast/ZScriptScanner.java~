/* The following code was generated by JFlex 1.4.1 on 1/30/16 10:42 AM */

/*
 * 07/29/2012
 *
 * This library is distributed under a modified BSD license.  See the included
 * ZScriptLanguageSupport.License.txt file for details.
 */
package org.fife.rsta.zscript.ast;


/**
 * Scanner for ZScript.<p>
 *
 * @author Robert Futrell
 * @version 0.1
 */

class ZScriptScanner implements TokenTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\10\1\4\1\1\1\0\1\4\1\1\16\10\4\0\1\4\1\65"+
    "\1\31\1\0\1\7\1\76\1\71\1\30\1\52\1\53\1\6\1\73"+
    "\1\61\1\74\1\17\1\5\1\12\3\34\4\16\2\13\1\70\1\60"+
    "\1\64\1\62\1\63\1\67\1\0\5\15\1\20\1\45\4\7\1\11"+
    "\6\7\1\44\4\7\1\14\2\7\1\56\1\2\1\57\1\75\1\7"+
    "\1\0\1\25\1\33\1\42\1\46\1\23\1\24\1\41\1\51\1\35"+
    "\1\7\1\43\1\26\1\36\1\32\1\40\1\37\1\7\1\22\1\27"+
    "\1\21\1\3\1\47\1\50\1\14\2\7\1\54\1\72\1\55\1\66"+
    "\41\10\2\0\4\7\4\0\1\7\2\0\1\10\7\0\1\7\4\0"+
    "\1\7\5\0\27\7\1\0\37\7\1\0\u01ca\7\4\0\14\7\16\0"+
    "\5\7\7\0\1\7\1\0\1\7\21\0\160\10\5\7\1\0\2\7"+
    "\2\0\4\7\10\0\1\7\1\0\3\7\1\0\1\7\1\0\24\7"+
    "\1\0\123\7\1\0\213\7\1\0\5\10\2\0\236\7\11\0\46\7"+
    "\2\0\1\7\7\0\47\7\7\0\1\7\1\0\55\10\1\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\1\10\10\0\33\7\5\0\3\7"+
    "\15\0\5\10\6\0\1\7\4\0\13\10\5\0\53\7\37\10\4\0"+
    "\2\7\1\10\143\7\1\0\1\7\10\10\1\0\6\10\2\7\2\10"+
    "\1\0\4\10\2\7\12\10\3\7\2\0\1\7\17\0\1\10\1\7"+
    "\1\10\36\7\33\10\2\0\131\7\13\10\1\7\16\0\12\10\41\7"+
    "\11\10\2\7\4\0\1\7\5\0\26\7\4\10\1\7\11\10\1\7"+
    "\3\10\1\7\5\10\22\0\31\7\3\10\104\0\1\7\1\0\13\7"+
    "\67\0\33\10\1\0\4\10\66\7\3\10\1\7\22\10\1\7\7\10"+
    "\12\7\2\10\2\0\12\10\1\0\7\7\1\0\7\7\1\0\3\10"+
    "\1\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0\1\7"+
    "\3\0\4\7\2\0\1\10\1\7\7\10\2\0\2\10\2\0\3\10"+
    "\1\7\10\0\1\10\4\0\2\7\1\0\3\7\2\10\2\0\12\10"+
    "\4\7\7\0\1\7\5\0\3\10\1\0\6\7\4\0\2\7\2\0"+
    "\26\7\1\0\7\7\1\0\2\7\1\0\2\7\1\0\2\7\2\0"+
    "\1\10\1\0\5\10\4\0\2\10\2\0\3\10\3\0\1\10\7\0"+
    "\4\7\1\0\1\7\7\0\14\10\3\7\1\10\13\0\3\10\1\0"+
    "\11\7\1\0\3\7\1\0\26\7\1\0\7\7\1\0\2\7\1\0"+
    "\5\7\2\0\1\10\1\7\10\10\1\0\3\10\1\0\3\10\2\0"+
    "\1\7\17\0\2\7\2\10\2\0\12\10\1\0\1\7\17\0\3\10"+
    "\1\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0\2\7"+
    "\1\0\5\7\2\0\1\10\1\7\7\10\2\0\2\10\2\0\3\10"+
    "\10\0\2\10\4\0\2\7\1\0\3\7\2\10\2\0\12\10\1\0"+
    "\1\7\20\0\1\10\1\7\1\0\6\7\3\0\3\7\1\0\4\7"+
    "\3\0\2\7\1\0\1\7\1\0\2\7\3\0\2\7\3\0\3\7"+
    "\3\0\14\7\4\0\5\10\3\0\3\10\1\0\4\10\2\0\1\7"+
    "\6\0\1\10\16\0\12\10\11\0\1\7\7\0\3\10\1\0\10\7"+
    "\1\0\3\7\1\0\27\7\1\0\12\7\1\0\5\7\3\0\1\7"+
    "\7\10\1\0\3\10\1\0\4\10\7\0\2\10\1\0\2\7\6\0"+
    "\2\7\2\10\2\0\12\10\22\0\2\10\1\0\10\7\1\0\3\7"+
    "\1\0\27\7\1\0\12\7\1\0\5\7\2\0\1\10\1\7\7\10"+
    "\1\0\3\10\1\0\4\10\7\0\2\10\7\0\1\7\1\0\2\7"+
    "\2\10\2\0\12\10\1\0\2\7\17\0\2\10\1\0\10\7\1\0"+
    "\3\7\1\0\51\7\2\0\1\7\7\10\1\0\3\10\1\0\4\10"+
    "\1\7\10\0\1\10\10\0\2\7\2\10\2\0\12\10\12\0\6\7"+
    "\2\0\2\10\1\0\22\7\3\0\30\7\1\0\11\7\1\0\1\7"+
    "\2\0\7\7\3\0\1\10\4\0\6\10\1\0\1\10\1\0\10\10"+
    "\22\0\2\10\15\0\60\7\1\10\2\7\7\10\4\0\10\7\10\10"+
    "\1\0\12\10\47\0\2\7\1\0\1\7\2\0\2\7\1\0\1\7"+
    "\2\0\1\7\6\0\4\7\1\0\7\7\1\0\3\7\1\0\1\7"+
    "\1\0\1\7\2\0\2\7\1\0\4\7\1\10\2\7\6\10\1\0"+
    "\2\10\1\7\2\0\5\7\1\0\1\7\1\0\6\10\2\0\12\10"+
    "\2\0\4\7\40\0\1\7\27\0\2\10\6\0\12\10\13\0\1\10"+
    "\1\0\1\10\1\0\1\10\4\0\2\10\10\7\1\0\44\7\4\0"+
    "\24\10\1\0\2\10\5\7\13\10\1\0\44\10\11\0\1\10\71\0"+
    "\53\7\24\10\1\7\12\10\6\0\6\7\4\10\4\7\3\10\1\7"+
    "\3\10\2\7\7\10\3\7\4\10\15\7\14\10\1\7\17\10\2\0"+
    "\46\7\1\0\1\7\5\0\1\7\2\0\53\7\1\0\u014d\7\1\0"+
    "\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\51\7\1\0"+
    "\4\7\2\0\41\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0"+
    "\4\7\2\0\17\7\1\0\71\7\1\0\4\7\2\0\103\7\2\0"+
    "\3\10\40\0\20\7\20\0\125\7\14\0\u026c\7\2\0\21\7\1\0"+
    "\32\7\5\0\113\7\3\0\3\7\17\0\15\7\1\0\4\7\3\10"+
    "\13\0\22\7\3\10\13\0\22\7\2\10\14\0\15\7\1\0\3\7"+
    "\1\0\2\10\14\0\64\7\40\10\3\0\1\7\3\0\2\7\1\10"+
    "\2\0\12\10\41\0\3\10\2\0\12\10\6\0\130\7\10\0\51\7"+
    "\1\10\1\7\5\0\106\7\12\0\35\7\3\0\14\10\4\0\14\10"+
    "\12\0\12\10\36\7\2\0\5\7\13\0\54\7\4\0\21\10\7\7"+
    "\2\10\6\0\12\10\46\0\27\7\5\10\4\0\65\7\12\10\1\0"+
    "\35\10\2\0\13\10\6\0\12\10\15\0\1\7\130\0\5\10\57\7"+
    "\21\10\7\7\4\0\12\10\21\0\11\10\14\0\3\10\36\7\15\10"+
    "\2\7\12\10\54\7\16\10\14\0\44\7\24\10\10\0\12\10\3\0"+
    "\3\7\12\10\44\7\122\0\3\10\1\0\25\10\4\7\1\10\4\7"+
    "\3\10\2\7\11\0\300\7\47\10\25\0\4\10\u0116\7\2\0\6\7"+
    "\2\0\46\7\2\0\6\7\2\0\10\7\1\0\1\7\1\0\1\7"+
    "\1\0\1\7\1\0\37\7\2\0\65\7\1\0\7\7\1\0\1\7"+
    "\3\0\3\7\1\0\7\7\3\0\4\7\2\0\6\7\4\0\15\7"+
    "\5\0\3\7\1\0\7\7\16\0\5\10\32\0\5\10\20\0\2\7"+
    "\23\0\1\7\13\0\5\10\5\0\6\10\1\0\1\7\15\0\1\7"+
    "\20\0\15\7\3\0\33\7\25\0\15\10\4\0\1\10\3\0\14\10"+
    "\21\0\1\7\4\0\1\7\2\0\12\7\1\0\1\7\3\0\5\7"+
    "\6\0\1\7\1\0\1\7\1\0\1\7\1\0\4\7\1\0\13\7"+
    "\2\0\4\7\5\0\5\7\4\0\1\7\21\0\51\7\u0a77\0\57\7"+
    "\1\0\57\7\1\0\205\7\6\0\4\7\3\10\2\7\14\0\46\7"+
    "\1\0\1\7\5\0\1\7\2\0\70\7\7\0\1\7\17\0\1\10"+
    "\27\7\11\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0"+
    "\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0\40\10\57\0"+
    "\1\7\u01d5\0\3\7\31\0\11\7\6\10\1\0\5\7\2\0\5\7"+
    "\4\0\126\7\2\0\2\10\2\0\3\7\1\0\132\7\1\0\4\7"+
    "\5\0\51\7\3\0\136\7\21\0\33\7\65\0\20\7\u0200\0\u19b6\7"+
    "\112\0\u51cd\7\63\0\u048d\7\103\0\56\7\2\0\u010d\7\3\0\20\7"+
    "\12\10\2\7\24\0\57\7\1\10\4\0\12\10\1\0\31\7\7\0"+
    "\1\10\120\7\2\10\45\0\11\7\2\0\147\7\2\0\4\7\1\0"+
    "\4\7\14\0\13\7\115\0\12\7\1\10\3\7\1\10\4\7\1\10"+
    "\27\7\5\10\20\0\1\7\7\0\64\7\14\0\2\10\62\7\21\10"+
    "\13\0\12\10\6\0\22\10\6\7\3\0\1\7\4\0\12\10\34\7"+
    "\10\10\2\0\27\7\15\10\14\0\35\7\3\0\4\10\57\7\16\10"+
    "\16\0\1\7\12\10\46\0\51\7\16\10\11\0\3\7\1\10\10\7"+
    "\2\10\2\0\12\10\6\0\27\7\3\0\1\7\1\10\4\0\60\7"+
    "\1\10\1\7\3\10\2\7\2\10\5\7\2\10\1\7\1\10\1\7"+
    "\30\0\3\7\2\0\13\7\5\10\2\0\3\7\2\10\12\0\6\7"+
    "\2\0\6\7\2\0\6\7\11\0\7\7\1\0\7\7\221\0\43\7"+
    "\10\10\1\0\2\10\2\0\12\10\6\0\u2ba4\7\14\0\27\7\4\0"+
    "\61\7\u2104\0\u016e\7\2\0\152\7\46\0\7\7\14\0\5\7\5\0"+
    "\1\7\1\10\12\7\1\0\15\7\1\0\5\7\1\0\1\7\1\0"+
    "\2\7\1\0\2\7\1\0\154\7\41\0\u016b\7\22\0\100\7\2\0"+
    "\66\7\50\0\15\7\3\0\20\10\20\0\7\10\14\0\2\7\30\0"+
    "\3\7\31\0\1\7\6\0\5\7\1\0\207\7\2\0\1\10\4\0"+
    "\1\7\13\0\12\10\7\0\32\7\4\0\1\7\1\0\32\7\13\0"+
    "\131\7\3\0\6\7\2\0\6\7\2\0\6\7\2\0\3\7\3\0"+
    "\2\7\3\0\2\7\22\0\3\10\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\3\2\6"+
    "\1\7\6\3\1\10\1\11\12\3\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\0\1\40\1\41\1\3\2\6"+
    "\3\0\12\3\4\10\2\11\1\42\4\3\1\43\6\3"+
    "\1\44\2\3\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\2\0\1\3\1\6\1\0\4\3"+
    "\1\66\2\3\1\67\2\3\1\70\4\10\3\11\1\3"+
    "\1\71\2\3\1\72\7\3\1\0\1\37\1\73\1\74"+
    "\1\75\1\3\1\76\4\3\1\10\1\11\2\0\1\77"+
    "\1\100\1\101\4\3\1\102\1\103\3\3\1\104\2\3"+
    "\1\10\1\11\1\0\3\3\1\105\1\3\1\106\1\107"+
    "\2\3\1\110\1\10\1\11\1\0\1\3\1\111\1\112"+
    "\1\113\1\114\1\115\1\0\1\3\1\0\1\116";

  private static int [] zzUnpackAction() {
    int [] result = new int[198];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\77\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372"+
    "\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a"+
    "\0\u05a9\0\u05e8\0\u0627\0\u0666\0\77\0\77\0\77\0\77"+
    "\0\77\0\77\0\77\0\77\0\u06a5\0\u06e4\0\u0723\0\u0762"+
    "\0\77\0\77\0\77\0\u07a1\0\u07e0\0\u081f\0\u085e\0\u089d"+
    "\0\u08dc\0\u091b\0\u095a\0\77\0\77\0\u0999\0\77\0\u09d8"+
    "\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0"+
    "\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8"+
    "\0\77\0\u0e07\0\u0e46\0\77\0\u0e85\0\u0ec4\0\u0f03\0\u0f42"+
    "\0\275\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\275"+
    "\0\u10fb\0\u113a\0\77\0\77\0\77\0\77\0\77\0\77"+
    "\0\77\0\77\0\77\0\77\0\77\0\77\0\77\0\77"+
    "\0\77\0\77\0\77\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275"+
    "\0\u12b4\0\u12f3\0\u1332\0\u1371\0\275\0\u13b0\0\u13ef\0\275"+
    "\0\u142e\0\u146d\0\77\0\u14ac\0\u14eb\0\u152a\0\u1569\0\77"+
    "\0\u15a8\0\u15e7\0\u1626\0\275\0\u1665\0\u16a4\0\275\0\u16e3"+
    "\0\u1722\0\u1761\0\u17a0\0\u17df\0\u181e\0\u185d\0\u189c\0\77"+
    "\0\275\0\77\0\275\0\u18db\0\275\0\u191a\0\u1959\0\u1998"+
    "\0\u19d7\0\u1a16\0\u1a55\0\u15e7\0\u1a94\0\275\0\275\0\u1ad3"+
    "\0\u1b12\0\u1b51\0\u1b90\0\u1bcf\0\275\0\275\0\u1c0e\0\u1c4d"+
    "\0\u1c8c\0\275\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7\0\u1e06"+
    "\0\u1e45\0\u1e84\0\275\0\u1ec3\0\275\0\275\0\u1f02\0\u1f41"+
    "\0\275\0\u1f80\0\u1fbf\0\u1ffe\0\u203d\0\275\0\275\0\275"+
    "\0\275\0\275\0\u207c\0\u20bb\0\u20fa\0\275";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[198];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\3\1\5\1\6\1\4"+
    "\1\2\1\7\1\10\1\11\2\4\1\11\1\12\1\4"+
    "\1\13\1\14\1\15\1\16\1\4\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\11\1\25\3\4\1\26\1\27"+
    "\1\4\1\30\1\31\1\32\1\33\1\34\1\4\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\100\0\1\3\2\0\1\3"+
    "\75\0\1\4\3\0\10\4\1\0\10\4\2\0\20\4"+
    "\32\0\1\62\1\63\53\0\1\64\76\0\1\65\17\0"+
    "\1\4\3\0\10\4\1\0\10\4\2\0\3\4\1\66"+
    "\14\4\36\0\1\67\1\70\1\71\1\72\1\0\1\70"+
    "\1\73\6\0\1\67\5\0\1\70\53\0\1\67\2\11"+
    "\2\0\1\11\1\73\6\0\1\67\5\0\1\11\45\0"+
    "\1\4\3\0\10\4\1\0\2\4\1\74\5\4\2\0"+
    "\20\4\30\0\1\4\3\0\10\4\1\0\3\4\1\75"+
    "\4\4\2\0\20\4\30\0\1\4\3\0\10\4\1\0"+
    "\6\4\1\76\1\4\2\0\16\4\1\77\1\4\30\0"+
    "\1\4\3\0\10\4\1\0\4\4\1\100\1\101\1\102"+
    "\1\4\2\0\6\4\1\103\11\4\30\0\1\4\3\0"+
    "\10\4\1\0\10\4\2\0\16\4\1\104\1\4\30\0"+
    "\1\4\3\0\10\4\1\0\10\4\2\0\10\4\1\105"+
    "\7\4\25\0\1\106\1\107\1\110\25\106\1\111\46\106"+
    "\1\22\1\112\1\113\26\22\1\114\45\22\3\0\1\115"+
    "\3\0\10\4\1\0\10\4\2\0\5\4\1\116\12\4"+
    "\30\0\1\4\3\0\10\4\1\0\10\4\2\0\6\4"+
    "\1\117\11\4\30\0\1\4\3\0\10\4\1\0\1\4"+
    "\1\120\2\4\1\121\3\4\2\0\1\122\3\4\1\123"+
    "\13\4\30\0\1\4\3\0\10\4\1\0\6\4\1\124"+
    "\1\4\2\0\20\4\30\0\1\4\3\0\10\4\1\0"+
    "\10\4\2\0\6\4\1\125\11\4\30\0\1\4\3\0"+
    "\10\4\1\0\10\4\2\0\10\4\1\126\7\4\30\0"+
    "\1\4\3\0\10\4\1\0\5\4\1\127\2\4\2\0"+
    "\20\4\30\0\1\4\3\0\10\4\1\0\10\4\2\0"+
    "\6\4\1\130\11\4\30\0\1\4\3\0\10\4\1\0"+
    "\10\4\2\0\6\4\1\131\11\4\30\0\1\4\3\0"+
    "\10\4\1\0\10\4\2\0\17\4\1\132\107\0\1\133"+
    "\76\0\1\134\1\135\75\0\1\136\1\0\1\137\74\0"+
    "\1\140\76\0\1\141\6\0\1\142\67\0\1\143\7\0"+
    "\1\144\66\0\1\145\10\0\1\146\65\0\1\147\1\150"+
    "\10\0\1\151\64\0\1\152\76\0\1\153\14\0\1\62"+
    "\1\0\75\62\6\154\1\155\70\154\3\0\1\4\3\0"+
    "\10\4\1\0\10\4\2\0\1\156\17\4\36\0\1\67"+
    "\1\70\1\71\2\0\1\70\1\73\6\0\1\67\5\0"+
    "\1\70\54\0\2\71\2\0\1\71\1\73\14\0\1\71"+
    "\54\0\2\157\1\0\2\157\1\0\1\157\2\0\3\157"+
    "\5\0\2\157\5\0\1\157\3\0\1\157\42\0\2\160"+
    "\2\0\1\160\15\0\1\160\45\0\1\161\3\0\10\4"+
    "\1\0\10\4\2\0\20\4\30\0\1\4\3\0\10\4"+
    "\1\0\1\4\1\162\6\4\2\0\20\4\30\0\1\4"+
    "\3\0\10\4\1\0\7\4\1\163\2\0\20\4\30\0"+
    "\1\4\3\0\10\4\1\0\3\4\1\164\4\4\2\0"+
    "\20\4\30\0\1\4\3\0\10\4\1\0\10\4\2\0"+
    "\10\4\1\165\7\4\30\0\1\4\3\0\10\4\1\0"+
    "\6\4\1\166\1\4\2\0\20\4\30\0\1\4\3\0"+
    "\10\4\1\0\10\4\2\0\6\4\1\167\11\4\30\0"+
    "\1\4\3\0\10\4\1\0\2\4\1\170\5\4\2\0"+
    "\20\4\30\0\1\4\3\0\10\4\1\0\3\4\1\171"+
    "\4\4\2\0\20\4\30\0\1\4\3\0\10\4\1\0"+
    "\2\4\1\172\5\4\2\0\20\4\25\0\30\107\1\173"+
    "\76\107\1\111\50\107\1\106\1\174\6\107\1\175\3\107"+
    "\1\176\2\107\2\106\1\107\1\106\3\107\1\177\3\106"+
    "\1\175\42\107\31\112\1\200\47\112\1\22\1\201\6\112"+
    "\1\22\3\112\1\22\2\112\2\22\1\112\1\22\3\112"+
    "\1\22\1\202\3\22\42\112\3\0\1\4\3\0\10\4"+
    "\1\0\6\4\1\203\1\4\2\0\20\4\30\0\1\4"+
    "\3\0\10\4\1\0\10\4\2\0\10\4\1\204\7\4"+
    "\30\0\1\4\3\0\10\4\1\0\10\4\2\0\6\4"+
    "\1\205\11\4\30\0\1\4\3\0\10\4\1\0\3\4"+
    "\1\206\4\4\2\0\20\4\30\0\1\4\3\0\10\4"+
    "\1\0\1\4\1\207\6\4\2\0\20\4\30\0\1\4"+
    "\3\0\10\4\1\0\10\4\2\0\5\4\1\210\12\4"+
    "\30\0\1\4\3\0\10\4\1\0\10\4\2\0\6\4"+
    "\1\211\11\4\30\0\1\4\3\0\10\4\1\0\10\4"+
    "\2\0\1\212\17\4\30\0\1\4\3\0\10\4\1\0"+
    "\2\4\1\213\5\4\2\0\20\4\30\0\1\4\3\0"+
    "\10\4\1\0\10\4\2\0\4\4\1\214\13\4\30\0"+
    "\1\4\3\0\10\4\1\0\10\4\2\0\3\4\1\215"+
    "\14\4\30\0\1\4\3\0\10\4\1\0\10\4\2\0"+
    "\3\4\1\216\14\4\25\0\6\154\1\217\70\154\5\0"+
    "\1\220\1\155\73\0\1\4\3\0\10\4\1\0\10\4"+
    "\2\0\11\4\1\221\6\4\36\0\1\67\2\157\1\0"+
    "\2\157\1\0\1\157\2\0\3\157\1\67\4\0\2\157"+
    "\5\0\1\157\3\0\1\157\42\0\2\160\2\0\1\160"+
    "\1\0\1\222\3\0\1\222\7\0\1\160\45\0\1\4"+
    "\3\0\10\4\1\0\3\4\1\223\4\4\2\0\20\4"+
    "\30\0\1\224\3\0\10\4\1\0\10\4\2\0\20\4"+
    "\30\0\1\4\3\0\10\4\1\0\3\4\1\225\4\4"+
    "\2\0\20\4\30\0\1\4\3\0\10\4\1\0\5\4"+
    "\1\226\2\4\2\0\20\4\30\0\1\4\3\0\10\4"+
    "\1\0\7\4\1\161\2\0\20\4\30\0\1\4\3\0"+
    "\10\4\1\0\5\4\1\227\2\4\2\0\20\4\30\0"+
    "\1\4\3\0\10\4\1\0\5\4\1\230\2\4\2\0"+
    "\20\4\30\0\1\4\3\0\10\4\1\0\10\4\2\0"+
    "\3\4\1\231\14\4\25\0\3\107\1\174\6\107\2\232"+
    "\1\107\2\232\1\107\1\232\2\107\3\232\2\107\1\111"+
    "\2\107\2\232\5\107\1\232\3\107\1\232\42\107\1\176"+
    "\3\107\1\176\11\107\1\173\3\107\1\176\54\107\1\106"+
    "\3\107\1\106\11\107\1\173\3\107\1\106\42\107\30\0"+
    "\1\173\46\0\3\112\1\201\6\112\2\233\1\112\2\233"+
    "\1\112\1\233\2\112\3\233\3\112\1\200\1\112\2\233"+
    "\5\112\1\233\3\112\1\233\30\112\1\234\1\0\1\235"+
    "\26\234\1\114\45\234\3\0\1\4\3\0\10\4\1\0"+
    "\6\4\1\236\1\4\2\0\20\4\30\0\1\4\3\0"+
    "\10\4\1\0\6\4\1\237\1\4\2\0\20\4\30\0"+
    "\1\4\3\0\10\4\1\0\10\4\2\0\4\4\1\240"+
    "\13\4\30\0\1\4\3\0\10\4\1\0\10\4\2\0"+
    "\6\4\1\241\11\4\30\0\1\4\3\0\10\4\1\0"+
    "\10\4\2\0\1\4\1\242\16\4\30\0\1\4\3\0"+
    "\10\4\1\0\7\4\1\243\2\0\20\4\30\0\1\4"+
    "\3\0\10\4\1\0\3\4\1\244\4\4\2\0\20\4"+
    "\30\0\1\4\3\0\10\4\1\0\3\4\1\245\4\4"+
    "\2\0\20\4\30\0\1\4\3\0\10\4\1\0\10\4"+
    "\2\0\14\4\1\246\3\4\30\0\1\4\3\0\10\4"+
    "\1\0\6\4\1\247\1\4\2\0\20\4\25\0\5\154"+
    "\1\220\1\217\70\154\3\0\1\4\3\0\10\4\1\0"+
    "\2\4\1\250\5\4\2\0\20\4\30\0\1\4\3\0"+
    "\10\4\1\0\10\4\2\0\5\4\1\251\12\4\30\0"+
    "\1\4\3\0\10\4\1\0\1\4\1\252\6\4\2\0"+
    "\20\4\30\0\1\4\3\0\10\4\1\0\10\4\2\0"+
    "\5\4\1\253\12\4\30\0\1\4\3\0\10\4\1\0"+
    "\10\4\2\0\5\4\1\254\12\4\25\0\12\107\2\255"+
    "\1\107\2\255\1\107\1\255\2\107\3\255\2\107\1\111"+
    "\2\107\2\255\5\107\1\255\3\107\1\255\30\107\12\112"+
    "\2\256\1\112\2\256\1\112\1\256\2\112\3\256\3\112"+
    "\1\200\1\112\2\256\5\112\1\256\3\112\1\256\30\112"+
    "\2\0\1\234\1\257\6\0\1\234\3\0\1\234\2\0"+
    "\2\234\1\0\1\234\3\0\5\234\45\0\1\4\3\0"+
    "\10\4\1\0\10\4\2\0\14\4\1\260\3\4\30\0"+
    "\1\4\3\0\10\4\1\0\2\4\1\261\5\4\2\0"+
    "\20\4\30\0\1\4\3\0\10\4\1\0\5\4\1\262"+
    "\2\4\2\0\20\4\30\0\1\4\3\0\10\4\1\0"+
    "\1\4\1\263\6\4\2\0\20\4\30\0\1\4\3\0"+
    "\10\4\1\0\3\4\1\264\4\4\2\0\20\4\30\0"+
    "\1\4\3\0\10\4\1\0\3\4\1\265\4\4\2\0"+
    "\20\4\30\0\1\4\3\0\10\4\1\0\10\4\2\0"+
    "\1\266\17\4\30\0\1\4\3\0\10\4\1\0\10\4"+
    "\2\0\6\4\1\267\11\4\30\0\1\4\3\0\10\4"+
    "\1\0\10\4\2\0\6\4\1\270\11\4\30\0\1\4"+
    "\3\0\10\4\1\0\1\4\1\271\6\4\2\0\20\4"+
    "\25\0\12\107\2\272\1\107\2\272\1\107\1\272\2\107"+
    "\3\272\2\107\1\111\2\107\2\272\5\107\1\272\3\107"+
    "\1\272\30\107\12\112\2\273\1\112\2\273\1\112\1\273"+
    "\2\112\3\273\3\112\1\200\1\112\2\273\5\112\1\273"+
    "\3\112\1\273\30\112\3\0\1\257\6\0\2\274\1\0"+
    "\2\274\1\0\1\274\2\0\3\274\5\0\2\274\5\0"+
    "\1\274\3\0\1\274\33\0\1\4\3\0\10\4\1\0"+
    "\5\4\1\275\2\4\2\0\20\4\30\0\1\4\3\0"+
    "\10\4\1\0\1\4\1\276\6\4\2\0\20\4\30\0"+
    "\1\4\3\0\10\4\1\0\6\4\1\277\1\4\2\0"+
    "\20\4\30\0\1\4\3\0\10\4\1\0\10\4\2\0"+
    "\1\300\17\4\30\0\1\4\3\0\10\4\1\0\10\4"+
    "\2\0\1\301\17\4\30\0\1\4\3\0\10\4\1\0"+
    "\10\4\2\0\1\302\17\4\25\0\12\107\2\106\1\107"+
    "\2\106\1\107\1\106\2\107\3\106\2\107\1\111\2\107"+
    "\2\106\5\107\1\106\3\107\1\106\30\107\12\112\2\22"+
    "\1\112\2\22\1\112\1\22\2\112\3\22\3\112\1\200"+
    "\1\112\2\22\5\112\1\22\3\112\1\22\30\112\12\0"+
    "\2\303\1\0\2\303\1\0\1\303\2\0\3\303\5\0"+
    "\2\303\5\0\1\303\3\0\1\303\33\0\1\4\3\0"+
    "\10\4\1\0\1\4\1\304\6\4\2\0\20\4\37\0"+
    "\2\305\1\0\2\305\1\0\1\305\2\0\3\305\5\0"+
    "\2\305\5\0\1\305\3\0\1\305\33\0\1\4\3\0"+
    "\10\4\1\0\5\4\1\306\2\4\2\0\20\4\37\0"+
    "\2\234\1\0\2\234\1\0\1\234\2\0\3\234\5\0"+
    "\2\234\5\0\1\234\3\0\1\234\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8505];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\1\11\22\1\10\11\4\1\3\11"+
    "\7\1\1\0\2\11\1\1\1\11\1\1\3\0\15\1"+
    "\1\11\2\1\1\11\16\1\21\11\2\0\2\1\1\0"+
    "\12\1\1\11\4\1\1\11\16\1\1\0\1\11\1\1"+
    "\1\11\11\1\2\0\21\1\1\0\14\1\1\0\6\1"+
    "\1\0\1\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[198];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */

	/**
	 * Whether comments should be returned as tokens.
	 */
	private boolean returnComments;

	/**
	 * Whether whitespace should be returned as tokens.
	 */
	private boolean returnWhitespace;


	private Token createToken(int type) {
		return createToken(type, false);
	}


	private Token createToken(int type, boolean invalid) {
		return new Token(type, yytext(), yyline, yycolumn, yychar, invalid);
	}


	/**
	 * Returns the current column into the current line.
	 *
	 * @return The current column.
	 */
	public int getColumn() {
		return yycolumn;
	}


	/**
	 * Returns the current line into the document.
	 *
	 * @return The current line.
	 */
	public int getLine() {
		return yyline;
	}


	/**
	 * Returns the current offset into the document.
	 *
	 * @return The offset.
	 */
	public int getOffset() {
		return yychar;
	}


	/**
	 * Returns whether comments are returned as tokens.
	 *
	 * @return Whether comments are returned as tokens.
	 * @see #getReturnWhitespace()
	 */
	public boolean getReturnComments() {
		return returnComments;
	}


	/**
	 * Returns whether whitespace is returned as tokens.
	 *
	 * @return Whether whitespace is returned as tokens.
	 * @see #getReturnComments()
	 */
	public boolean getReturnWhitespace() {
		return returnWhitespace;
	}


	/**
	 * Sets whether comments are returned as tokens.
	 *
	 * @param returnComments Whether comments should be returned as tokens.
	 * @see #getReturnComments()
	 * @see #setReturnWhitespace(boolean)
	 */
	public void setReturnComments(boolean returnComments) {
		this.returnComments = returnComments;
	}


	/**
	 * Sets whether whitespace is returned as tokens.
	 *
	 * @param returnWhitespace Whether whitespace should be returned as tokens.
	 * @see #getReturnWhitespace()
	 * @see #setReturnComments(boolean)
	 */
	public void setReturnWhitespace(boolean returnWhitespace) {
		this.returnWhitespace = returnWhitespace;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  ZScriptScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  ZScriptScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2272) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 10: 
          { return createToken(SEPARATOR_LPAREN);
          }
        case 79: break;
        case 75: 
          { return createToken(KEYWORD_SCREEN);
          }
        case 80: break;
        case 50: 
          { return createToken(OPERATOR_MEMBER);
          }
        case 81: break;
        case 5: 
          { return createToken(OPERATOR_TIMES);
          }
        case 82: break;
        case 64: 
          { return createToken(DATA_TYPE_BOOL);
          }
        case 83: break;
        case 33: 
          { return createToken(OPERATOR_TIMES_EQUALS);
          }
        case 84: break;
        case 51: 
          { return createToken(OPERATOR_DECREMENT);
          }
        case 85: break;
        case 14: 
          { return createToken(SEPARATOR_LBRACKET);
          }
        case 86: break;
        case 25: 
          { return createToken(OPERATOR_BITWISE_AND);
          }
        case 87: break;
        case 30: 
          { return createToken(OPERATOR_MOD);
          }
        case 88: break;
        case 67: 
          { return createToken(KEYWORD_VOID);
          }
        case 89: break;
        case 37: 
          { return createToken(OPERATOR_EQUALS_EQUALS);
          }
        case 90: break;
        case 63: 
          { return createToken(LITERAL_NULL);
          }
        case 91: break;
        case 42: 
          { return createToken(OPERATOR_NE);
          }
        case 92: break;
        case 54: 
          { return createToken(DATA_TYPE_FFC);
          }
        case 93: break;
        case 27: 
          { return createToken(OPERATOR_PLUS);
          }
        case 94: break;
        case 22: 
          { return createToken(OPERATOR_BITWISE_NOT);
          }
        case 95: break;
        case 7: 
          { return createToken(SEPARATOR_DOT);
          }
        case 96: break;
        case 34: 
          { return createToken(LITERAL_STRING);
          }
        case 97: break;
        case 77: 
          { return createToken(DATA_TYPE_LWEAPON);
          }
        case 98: break;
        case 45: 
          { return createToken(OPERATOR_BITWISE_OR_EQUALS);
          }
        case 99: break;
        case 62: 
          { return createToken(KEYWORD_ELSE);
          }
        case 100: break;
        case 58: 
          { return createToken(DATA_TYPE_INT);
          }
        case 101: break;
        case 31: 
          { if (returnComments) {
									return createToken(COMMENT);
								}
          }
        case 102: break;
        case 15: 
          { return createToken(SEPARATOR_RBRACKET);
          }
        case 103: break;
        case 8: 
          { return createToken(LITERAL_CHAR, true);
          }
        case 104: break;
        case 69: 
          { return createToken(KEYWORD_CONST);
          }
        case 105: break;
        case 35: 
          { return createToken(KEYWORD_IF);
          }
        case 106: break;
        case 60: 
          { return createToken(LITERAL_FP);
          }
        case 107: break;
        case 72: 
          { return createToken(KEYWORD_SCRIPT);
          }
        case 108: break;
        case 38: 
          { return createToken(OPERATOR_GTE);
          }
        case 109: break;
        case 55: 
          { return createToken(KEYWORD_FOR);
          }
        case 110: break;
        case 29: 
          { return createToken(OPERATOR_BITWISE_XOR);
          }
        case 111: break;
        case 17: 
          { return createToken(SEPARATOR_COMMA);
          }
        case 112: break;
        case 13: 
          { return createToken(SEPARATOR_RBRACE);
          }
        case 113: break;
        case 40: 
          { return createToken(OPERATOR_LTE);
          }
        case 114: break;
        case 2: 
          { if (returnWhitespace) {
									return createToken(WHITESPACE);
								}
          }
        case 115: break;
        case 56: 
          { return createToken(LITERAL_CHAR);
          }
        case 116: break;
        case 68: 
          { return createToken(DATA_TYPE_FLOAT);
          }
        case 117: break;
        case 47: 
          { return createToken(OPERATOR_PLUS_EQUALS);
          }
        case 118: break;
        case 1: 
          { return createToken(IDENTIFIER, true);
          }
        case 119: break;
        case 9: 
          { return createToken(LITERAL_STRING, true);
          }
        case 120: break;
        case 66: 
          { return createToken(KEYWORD_GAME);
          }
        case 121: break;
        case 4: 
          { return createToken(OPERATOR_DIVIDE);
          }
        case 122: break;
        case 28: 
          { return createToken(OPERATOR_MINUS);
          }
        case 123: break;
        case 19: 
          { return createToken(OPERATOR_GT);
          }
        case 124: break;
        case 78: 
          { return createToken(DATA_TYPE_ITEMDATA);
          }
        case 125: break;
        case 46: 
          { return createToken(OPERATOR_LOGICAL_OR);
          }
        case 126: break;
        case 3: 
          { return createToken(IDENTIFIER);
          }
        case 127: break;
        case 53: 
          { return createToken(OPERATOR_MOD_EQUALS);
          }
        case 128: break;
        case 24: 
          { return createToken(OPERATOR_COLON);
          }
        case 129: break;
        case 59: 
          { return createToken(KEYWORD_LINK);
          }
        case 130: break;
        case 6: 
          { return createToken(LITERAL_INT);
          }
        case 131: break;
        case 12: 
          { return createToken(SEPARATOR_LBRACE);
          }
        case 132: break;
        case 44: 
          { return createToken(OPERATOR_LOGICAL_AND);
          }
        case 133: break;
        case 20: 
          { return createToken(OPERATOR_LT);
          }
        case 134: break;
        case 23: 
          { return createToken(OPERATOR_QUESTION);
          }
        case 135: break;
        case 18: 
          { return createToken(OPERATOR_EQUALS);
          }
        case 136: break;
        case 43: 
          { return createToken(OPERATOR_BITWISE_AND_EQUALS);
          }
        case 137: break;
        case 39: 
          { return createToken(OPERATOR_RSHIFT);
          }
        case 138: break;
        case 61: 
          { return createToken(LITERAL_BOOLEAN);
          }
        case 139: break;
        case 21: 
          { return createToken(OPERATOR_LOGICAL_NOT);
          }
        case 140: break;
        case 65: 
          { return createToken(DATA_TYPE_ITEM);
          }
        case 141: break;
        case 11: 
          { return createToken(SEPARATOR_RPAREN);
          }
        case 142: break;
        case 26: 
          { return createToken(OPERATOR_BITWISE_OR);
          }
        case 143: break;
        case 48: 
          { return createToken(OPERATOR_INCREMENT);
          }
        case 144: break;
        case 71: 
          { return createToken(KEYWORD_RETURN);
          }
        case 145: break;
        case 73: 
          { return createToken(CD_IMPORT);
          }
        case 146: break;
        case 74: 
          { return createToken(KEYWORD_GLOBAL);
          }
        case 147: break;
        case 16: 
          { return createToken(SEPARATOR_SEMICOLON);
          }
        case 148: break;
        case 49: 
          { return createToken(OPERATOR_MINUS_EQUALS);
          }
        case 149: break;
        case 32: 
          { return createToken(OPERATOR_DIVIDE_EQUALS);
          }
        case 150: break;
        case 52: 
          { return createToken(OPERATOR_BITWISE_XOR_EQUALS);
          }
        case 151: break;
        case 41: 
          { return createToken(OPERATOR_LSHIFT);
          }
        case 152: break;
        case 76: 
          { return createToken(DATA_TYPE_EWEAPON);
          }
        case 153: break;
        case 36: 
          { return createToken(KEYWORD_DO);
          }
        case 154: break;
        case 70: 
          { return createToken(KEYWORD_WHILE);
          }
        case 155: break;
        case 57: 
          { return createToken(DATA_TYPE_NPC);
          }
        case 156: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
